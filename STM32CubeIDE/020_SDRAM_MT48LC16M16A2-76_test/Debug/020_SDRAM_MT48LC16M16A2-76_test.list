
020_SDRAM_MT48LC16M16A2-76_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002eac  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800305c  0800305c  0001305c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800314c  0800314c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800314c  0800314c  0001314c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003154  08003154  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003154  08003154  00013154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003158  08003158  00013158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800315c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000001a4  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000020c  2000020c  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   00006d95  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001746  00000000  00000000  00026e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000710  00000000  00000000  000285b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000525  00000000  00000000  00028cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000241cc  00000000  00000000  000291ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000082b4  00000000  00000000  0004d3b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d77df  00000000  00000000  0005566d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000245c  00000000  00000000  0012ce4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0012f2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003044 	.word	0x08003044

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08003044 	.word	0x08003044

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
	uint32_t addr_err[0x100];
	uint8_t ram_err[0x100];
	uint8_t sdram_err[0x100];
};

int main(void) {
 800058c:	b580      	push	{r7, lr}
 800058e:	f5ad 6de3 	sub.w	sp, sp, #1816	; 0x718
 8000592:	af00      	add	r7, sp, #0
	HAL_Init();
 8000594:	f000 fc0c 	bl	8000db0 <HAL_Init>
	SystemClock_Config();
 8000598:	f000 f8c4 	bl	8000724 <SystemClock_Config>
	GPIO_Init();
 800059c:	f000 f9b6 	bl	800090c <GPIO_Init>
	MX_FMC_Init();
 80005a0:	f000 f922 	bl	80007e8 <MX_FMC_Init>

	volatile uint32_t test_ok = 0; //zmienna w której będzie wynik testu
 80005a4:	2300      	movs	r3, #0
 80005a6:	f8c7 3700 	str.w	r3, [r7, #1792]	; 0x700
	struct Test_ERR test_err;

	// uzupełnienie randomem małego bloku na stosie

	uint8_t tab[0x100];
	srand(HAL_GetTick());
 80005aa:	f000 fc67 	bl	8000e7c <HAL_GetTick>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 fd85 	bl	80020c0 <srand>
	for (int i = 0; i < 0x100; i++) {
 80005b6:	2300      	movs	r3, #0
 80005b8:	f8c7 3714 	str.w	r3, [r7, #1812]	; 0x714
 80005bc:	e010      	b.n	80005e0 <main+0x54>
		tab[i] = i; // rand() % 0x100;
 80005be:	f8d7 3714 	ldr.w	r3, [r7, #1812]	; 0x714
 80005c2:	b2d9      	uxtb	r1, r3
 80005c4:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 80005c8:	f5a3 62e3 	sub.w	r2, r3, #1816	; 0x718
 80005cc:	f8d7 3714 	ldr.w	r3, [r7, #1812]	; 0x714
 80005d0:	4413      	add	r3, r2
 80005d2:	460a      	mov	r2, r1
 80005d4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 0x100; i++) {
 80005d6:	f8d7 3714 	ldr.w	r3, [r7, #1812]	; 0x714
 80005da:	3301      	adds	r3, #1
 80005dc:	f8c7 3714 	str.w	r3, [r7, #1812]	; 0x714
 80005e0:	f8d7 3714 	ldr.w	r3, [r7, #1812]	; 0x714
 80005e4:	2bff      	cmp	r3, #255	; 0xff
 80005e6:	ddea      	ble.n	80005be <main+0x32>
	}

	for (int j = 0; j < SDRAM_BANK_COUNT; j++)
 80005e8:	2300      	movs	r3, #0
 80005ea:	f8c7 3710 	str.w	r3, [r7, #1808]	; 0x710
 80005ee:	e024      	b.n	800063a <main+0xae>
		for (int i = 0; i < 0x100; i++) {
 80005f0:	2300      	movs	r3, #0
 80005f2:	f8c7 370c 	str.w	r3, [r7, #1804]	; 0x70c
 80005f6:	e017      	b.n	8000628 <main+0x9c>
			*(__IO uint8_t*) (SDRAM_BANK_ADDR_START + (j * 0x100) + (1 * i)) = tab[i];
 80005f8:	f8d7 3710 	ldr.w	r3, [r7, #1808]	; 0x710
 80005fc:	021b      	lsls	r3, r3, #8
 80005fe:	461a      	mov	r2, r3
 8000600:	f8d7 370c 	ldr.w	r3, [r7, #1804]	; 0x70c
 8000604:	4413      	add	r3, r2
 8000606:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800060a:	4619      	mov	r1, r3
 800060c:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 8000610:	f5a3 62e3 	sub.w	r2, r3, #1816	; 0x718
 8000614:	f8d7 370c 	ldr.w	r3, [r7, #1804]	; 0x70c
 8000618:	4413      	add	r3, r2
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	700b      	strb	r3, [r1, #0]
		for (int i = 0; i < 0x100; i++) {
 800061e:	f8d7 370c 	ldr.w	r3, [r7, #1804]	; 0x70c
 8000622:	3301      	adds	r3, #1
 8000624:	f8c7 370c 	str.w	r3, [r7, #1804]	; 0x70c
 8000628:	f8d7 370c 	ldr.w	r3, [r7, #1804]	; 0x70c
 800062c:	2bff      	cmp	r3, #255	; 0xff
 800062e:	dde3      	ble.n	80005f8 <main+0x6c>
	for (int j = 0; j < SDRAM_BANK_COUNT; j++)
 8000630:	f8d7 3710 	ldr.w	r3, [r7, #1808]	; 0x710
 8000634:	3301      	adds	r3, #1
 8000636:	f8c7 3710 	str.w	r3, [r7, #1808]	; 0x710
 800063a:	f8d7 3710 	ldr.w	r3, [r7, #1808]	; 0x710
 800063e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000642:	dbd5      	blt.n	80005f0 <main+0x64>
		}

	for (int j = 0; j < SDRAM_BANK_COUNT; j++)
 8000644:	2300      	movs	r3, #0
 8000646:	f8c7 3708 	str.w	r3, [r7, #1800]	; 0x708
 800064a:	e064      	b.n	8000716 <main+0x18a>
		for (int i = 0; i < 0x100; i++) {
 800064c:	2300      	movs	r3, #0
 800064e:	f8c7 3704 	str.w	r3, [r7, #1796]	; 0x704
 8000652:	e057      	b.n	8000704 <main+0x178>
			if ((*(__IO uint8_t*) (SDRAM_BANK_ADDR_START + (j * 0x100) + (1 * i))) != tab[i]) {
 8000654:	f8d7 3708 	ldr.w	r3, [r7, #1800]	; 0x708
 8000658:	021b      	lsls	r3, r3, #8
 800065a:	461a      	mov	r2, r3
 800065c:	f8d7 3704 	ldr.w	r3, [r7, #1796]	; 0x704
 8000660:	4413      	add	r3, r2
 8000662:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b2da      	uxtb	r2, r3
 800066a:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 800066e:	f5a3 61e3 	sub.w	r1, r3, #1816	; 0x718
 8000672:	f8d7 3704 	ldr.w	r3, [r7, #1796]	; 0x704
 8000676:	440b      	add	r3, r1
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	429a      	cmp	r2, r3
 800067c:	d03d      	beq.n	80006fa <main+0x16e>
				test_err.addr_err[test_ok] = (SDRAM_BANK_ADDR_START + (j * 0x100) + (1 * i));
 800067e:	f8d7 3708 	ldr.w	r3, [r7, #1800]	; 0x708
 8000682:	021b      	lsls	r3, r3, #8
 8000684:	461a      	mov	r2, r3
 8000686:	f8d7 3704 	ldr.w	r3, [r7, #1796]	; 0x704
 800068a:	4413      	add	r3, r2
 800068c:	f8d7 2700 	ldr.w	r2, [r7, #1792]	; 0x700
 8000690:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8000694:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 8000698:	f5a3 63c3 	sub.w	r3, r3, #1560	; 0x618
 800069c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				test_err.sdram_err[test_ok] = *(__IO uint8_t*) (SDRAM_BANK_ADDR_START + (j * 0x100) + (1 * i));
 80006a0:	f8d7 3708 	ldr.w	r3, [r7, #1800]	; 0x708
 80006a4:	021b      	lsls	r3, r3, #8
 80006a6:	461a      	mov	r2, r3
 80006a8:	f8d7 3704 	ldr.w	r3, [r7, #1796]	; 0x704
 80006ac:	4413      	add	r3, r2
 80006ae:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80006b2:	461a      	mov	r2, r3
 80006b4:	f8d7 3700 	ldr.w	r3, [r7, #1792]	; 0x700
 80006b8:	7812      	ldrb	r2, [r2, #0]
 80006ba:	b2d1      	uxtb	r1, r2
 80006bc:	f507 62e3 	add.w	r2, r7, #1816	; 0x718
 80006c0:	f5a2 62c3 	sub.w	r2, r2, #1560	; 0x618
 80006c4:	4413      	add	r3, r2
 80006c6:	460a      	mov	r2, r1
 80006c8:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
				test_err.ram_err[test_ok] = tab[i];
 80006cc:	f8d7 3700 	ldr.w	r3, [r7, #1792]	; 0x700
 80006d0:	f507 62e3 	add.w	r2, r7, #1816	; 0x718
 80006d4:	f5a2 61e3 	sub.w	r1, r2, #1816	; 0x718
 80006d8:	f8d7 2704 	ldr.w	r2, [r7, #1796]	; 0x704
 80006dc:	440a      	add	r2, r1
 80006de:	7811      	ldrb	r1, [r2, #0]
 80006e0:	f507 62e3 	add.w	r2, r7, #1816	; 0x718
 80006e4:	f5a2 62c3 	sub.w	r2, r2, #1560	; 0x618
 80006e8:	4413      	add	r3, r2
 80006ea:	460a      	mov	r2, r1
 80006ec:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
				test_ok++;
 80006f0:	f8d7 3700 	ldr.w	r3, [r7, #1792]	; 0x700
 80006f4:	3301      	adds	r3, #1
 80006f6:	f8c7 3700 	str.w	r3, [r7, #1792]	; 0x700
		for (int i = 0; i < 0x100; i++) {
 80006fa:	f8d7 3704 	ldr.w	r3, [r7, #1796]	; 0x704
 80006fe:	3301      	adds	r3, #1
 8000700:	f8c7 3704 	str.w	r3, [r7, #1796]	; 0x704
 8000704:	f8d7 3704 	ldr.w	r3, [r7, #1796]	; 0x704
 8000708:	2bff      	cmp	r3, #255	; 0xff
 800070a:	dda3      	ble.n	8000654 <main+0xc8>
	for (int j = 0; j < SDRAM_BANK_COUNT; j++)
 800070c:	f8d7 3708 	ldr.w	r3, [r7, #1800]	; 0x708
 8000710:	3301      	adds	r3, #1
 8000712:	f8c7 3708 	str.w	r3, [r7, #1800]	; 0x708
 8000716:	f8d7 3708 	ldr.w	r3, [r7, #1800]	; 0x708
 800071a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800071e:	db95      	blt.n	800064c <main+0xc0>
			}
		}

	__NOP();
 8000720:	bf00      	nop

	while (1) {
 8000722:	e7fe      	b.n	8000722 <main+0x196>

08000724 <SystemClock_Config>:
	}

}

void SystemClock_Config(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	; 0x50
 8000728:	af00      	add	r7, sp, #0
	__HAL_RCC_PWR_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	4b2c      	ldr	r3, [pc, #176]	; (80007e0 <SystemClock_Config+0xbc>)
 8000730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000732:	4a2b      	ldr	r2, [pc, #172]	; (80007e0 <SystemClock_Config+0xbc>)
 8000734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000738:	6413      	str	r3, [r2, #64]	; 0x40
 800073a:	4b29      	ldr	r3, [pc, #164]	; (80007e0 <SystemClock_Config+0xbc>)
 800073c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b26      	ldr	r3, [pc, #152]	; (80007e4 <SystemClock_Config+0xc0>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a25      	ldr	r2, [pc, #148]	; (80007e4 <SystemClock_Config+0xc0>)
 8000750:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000754:	6013      	str	r3, [r2, #0]
 8000756:	4b23      	ldr	r3, [pc, #140]	; (80007e4 <SystemClock_Config+0xc0>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000762:	f107 0320 	add.w	r3, r7, #32
 8000766:	2230      	movs	r2, #48	; 0x30
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f001 fdc9 	bl	8002302 <memset>
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000770:	2301      	movs	r3, #1
 8000772:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000774:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077a:	2302      	movs	r3, #2
 800077c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000784:	2304      	movs	r3, #4
 8000786:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 8000788:	23b4      	movs	r3, #180	; 0xb4
 800078a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800078c:	2302      	movs	r3, #2
 800078e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000790:	2304      	movs	r3, #4
 8000792:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000794:	f107 0320 	add.w	r3, r7, #32
 8000798:	4618      	mov	r0, r3
 800079a:	f000 fe81 	bl	80014a0 <HAL_RCC_OscConfig>
	HAL_PWREx_EnableOverDrive();
 800079e:	f000 fe2f 	bl	8001400 <HAL_PWREx_EnableOverDrive>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80007b2:	230f      	movs	r3, #15
 80007b4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b6:	2302      	movs	r3, #2
 80007b8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007c2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c8:	61fb      	str	r3, [r7, #28]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	2105      	movs	r1, #5
 80007d0:	4618      	mov	r0, r3
 80007d2:	f001 f8dd 	bl	8001990 <HAL_RCC_ClockConfig>
}
 80007d6:	bf00      	nop
 80007d8:	3750      	adds	r7, #80	; 0x50
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40007000 	.word	0x40007000

080007e8 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;
static void MX_FMC_Init(void) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08c      	sub	sp, #48	; 0x30
 80007ec:	af00      	add	r7, sp, #0
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 80007ee:	4b45      	ldr	r3, [pc, #276]	; (8000904 <MX_FMC_Init+0x11c>)
 80007f0:	4a45      	ldr	r2, [pc, #276]	; (8000908 <MX_FMC_Init+0x120>)
 80007f2:	601a      	str	r2, [r3, #0]
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80007f4:	4b43      	ldr	r3, [pc, #268]	; (8000904 <MX_FMC_Init+0x11c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80007fa:	4b42      	ldr	r3, [pc, #264]	; (8000904 <MX_FMC_Init+0x11c>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000800:	4b40      	ldr	r3, [pc, #256]	; (8000904 <MX_FMC_Init+0x11c>)
 8000802:	2208      	movs	r2, #8
 8000804:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000806:	4b3f      	ldr	r3, [pc, #252]	; (8000904 <MX_FMC_Init+0x11c>)
 8000808:	2210      	movs	r2, #16
 800080a:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800080c:	4b3d      	ldr	r3, [pc, #244]	; (8000904 <MX_FMC_Init+0x11c>)
 800080e:	2240      	movs	r2, #64	; 0x40
 8000810:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000812:	4b3c      	ldr	r3, [pc, #240]	; (8000904 <MX_FMC_Init+0x11c>)
 8000814:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000818:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800081a:	4b3a      	ldr	r3, [pc, #232]	; (8000904 <MX_FMC_Init+0x11c>)
 800081c:	2200      	movs	r2, #0
 800081e:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000820:	4b38      	ldr	r3, [pc, #224]	; (8000904 <MX_FMC_Init+0x11c>)
 8000822:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000826:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000828:	4b36      	ldr	r3, [pc, #216]	; (8000904 <MX_FMC_Init+0x11c>)
 800082a:	2200      	movs	r2, #0
 800082c:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800082e:	4b35      	ldr	r3, [pc, #212]	; (8000904 <MX_FMC_Init+0x11c>)
 8000830:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000834:	629a      	str	r2, [r3, #40]	; 0x28
	// sdram clk = 90MHz = 11,11ns
	FMC_SDRAM_TimingTypeDef SdramTiming = { 0 };
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
 8000846:	615a      	str	r2, [r3, #20]
 8000848:	619a      	str	r2, [r3, #24]
	SdramTiming.LoadToActiveDelay = 2;
 800084a:	2302      	movs	r3, #2
 800084c:	617b      	str	r3, [r7, #20]
	SdramTiming.ExitSelfRefreshDelay = 7;
 800084e:	2307      	movs	r3, #7
 8000850:	61bb      	str	r3, [r7, #24]
	SdramTiming.SelfRefreshTime = 4;
 8000852:	2304      	movs	r3, #4
 8000854:	61fb      	str	r3, [r7, #28]
	SdramTiming.RowCycleDelay = 6;
 8000856:	2306      	movs	r3, #6
 8000858:	623b      	str	r3, [r7, #32]
	SdramTiming.WriteRecoveryTime = 2;
 800085a:	2302      	movs	r3, #2
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
	SdramTiming.RPDelay = 2;
 800085e:	2302      	movs	r3, #2
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
	SdramTiming.RCDDelay = 2;
 8000862:	2302      	movs	r3, #2
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_SDRAM_Init(&hsdram1, &SdramTiming);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4619      	mov	r1, r3
 800086c:	4825      	ldr	r0, [pc, #148]	; (8000904 <MX_FMC_Init+0x11c>)
 800086e:	f001 fa7b 	bl	8001d68 <HAL_SDRAM_Init>
#define SDRAM_MODEREG_OPERATING_MODE_STANDARD   	((uint16_t)0x0000)
#define SDRAM_MODEREG_WRITEBURST_MODE_PROGRAMMED	((uint16_t)0x0000)
#define SDRAM_MODEREG_WRITEBURST_MODE_SINGLE    	((uint16_t)0x0200)
	// SDRAM Initialization Sequence
	FMC_SDRAM_CommandTypeDef cmd;
	cmd.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8000872:	2301      	movs	r3, #1
 8000874:	607b      	str	r3, [r7, #4]
	cmd.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000876:	2310      	movs	r3, #16
 8000878:	60bb      	str	r3, [r7, #8]
	cmd.AutoRefreshNumber = 1;
 800087a:	2301      	movs	r3, #1
 800087c:	60fb      	str	r3, [r7, #12]
	cmd.ModeRegisterDefinition = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
	HAL_SDRAM_SendCommand(&hsdram1, &cmd, 0xFFFF);
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000888:	4619      	mov	r1, r3
 800088a:	481e      	ldr	r0, [pc, #120]	; (8000904 <MX_FMC_Init+0x11c>)
 800088c:	f001 faa0 	bl	8001dd0 <HAL_SDRAM_SendCommand>
	HAL_Delay(1);
 8000890:	2001      	movs	r0, #1
 8000892:	f000 faff 	bl	8000e94 <HAL_Delay>
	cmd.CommandMode = FMC_SDRAM_CMD_PALL;
 8000896:	2302      	movs	r3, #2
 8000898:	607b      	str	r3, [r7, #4]
	cmd.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800089a:	2310      	movs	r3, #16
 800089c:	60bb      	str	r3, [r7, #8]
	cmd.AutoRefreshNumber = 1;
 800089e:	2301      	movs	r3, #1
 80008a0:	60fb      	str	r3, [r7, #12]
	cmd.ModeRegisterDefinition = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
	HAL_SDRAM_SendCommand(&hsdram1, &cmd, 0xFFFF);
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ac:	4619      	mov	r1, r3
 80008ae:	4815      	ldr	r0, [pc, #84]	; (8000904 <MX_FMC_Init+0x11c>)
 80008b0:	f001 fa8e 	bl	8001dd0 <HAL_SDRAM_SendCommand>
	cmd.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80008b4:	2303      	movs	r3, #3
 80008b6:	607b      	str	r3, [r7, #4]
	cmd.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80008b8:	2310      	movs	r3, #16
 80008ba:	60bb      	str	r3, [r7, #8]
	cmd.AutoRefreshNumber = 8;
 80008bc:	2308      	movs	r3, #8
 80008be:	60fb      	str	r3, [r7, #12]
	cmd.ModeRegisterDefinition = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	613b      	str	r3, [r7, #16]
	HAL_SDRAM_SendCommand(&hsdram1, &cmd, 0xFFFF);
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ca:	4619      	mov	r1, r3
 80008cc:	480d      	ldr	r0, [pc, #52]	; (8000904 <MX_FMC_Init+0x11c>)
 80008ce:	f001 fa7f 	bl	8001dd0 <HAL_SDRAM_SendCommand>
	cmd.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 80008d2:	2304      	movs	r3, #4
 80008d4:	607b      	str	r3, [r7, #4]
	cmd.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80008d6:	2310      	movs	r3, #16
 80008d8:	60bb      	str	r3, [r7, #8]
	cmd.AutoRefreshNumber = 1;
 80008da:	2301      	movs	r3, #1
 80008dc:	60fb      	str	r3, [r7, #12]
	cmd.ModeRegisterDefinition =
 80008de:	f240 2321 	movw	r3, #545	; 0x221
 80008e2:	613b      	str	r3, [r7, #16]
	SDRAM_MODEREG_BURST_LENGTH_2 |
	SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL |
	SDRAM_MODEREG_CAS_LATENCY_2 |
	SDRAM_MODEREG_OPERATING_MODE_STANDARD |
	SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
	HAL_SDRAM_SendCommand(&hsdram1, &cmd, 0xFFFF);
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_FMC_Init+0x11c>)
 80008ee:	f001 fa6f 	bl	8001dd0 <HAL_SDRAM_SendCommand>
	HAL_SDRAM_ProgramRefreshRate(&hsdram1, 683);
 80008f2:	f240 21ab 	movw	r1, #683	; 0x2ab
 80008f6:	4803      	ldr	r0, [pc, #12]	; (8000904 <MX_FMC_Init+0x11c>)
 80008f8:	f001 fa9f 	bl	8001e3a <HAL_SDRAM_ProgramRefreshRate>
}
 80008fc:	bf00      	nop
 80008fe:	3730      	adds	r7, #48	; 0x30
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000084 	.word	0x20000084
 8000908:	a0000140 	.word	0xa0000140

0800090c <GPIO_Init>:

static void GPIO_Init(void) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b08e      	sub	sp, #56	; 0x38
 8000910:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
 8000916:	4b6e      	ldr	r3, [pc, #440]	; (8000ad0 <GPIO_Init+0x1c4>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a6d      	ldr	r2, [pc, #436]	; (8000ad0 <GPIO_Init+0x1c4>)
 800091c:	f043 0320 	orr.w	r3, r3, #32
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b6b      	ldr	r3, [pc, #428]	; (8000ad0 <GPIO_Init+0x1c4>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0320 	and.w	r3, r3, #32
 800092a:	623b      	str	r3, [r7, #32]
 800092c:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
 8000932:	4b67      	ldr	r3, [pc, #412]	; (8000ad0 <GPIO_Init+0x1c4>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a66      	ldr	r2, [pc, #408]	; (8000ad0 <GPIO_Init+0x1c4>)
 8000938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b64      	ldr	r3, [pc, #400]	; (8000ad0 <GPIO_Init+0x1c4>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000946:	61fb      	str	r3, [r7, #28]
 8000948:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	61bb      	str	r3, [r7, #24]
 800094e:	4b60      	ldr	r3, [pc, #384]	; (8000ad0 <GPIO_Init+0x1c4>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a5f      	ldr	r2, [pc, #380]	; (8000ad0 <GPIO_Init+0x1c4>)
 8000954:	f043 0304 	orr.w	r3, r3, #4
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b5d      	ldr	r3, [pc, #372]	; (8000ad0 <GPIO_Init+0x1c4>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0304 	and.w	r3, r3, #4
 8000962:	61bb      	str	r3, [r7, #24]
 8000964:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
 800096a:	4b59      	ldr	r3, [pc, #356]	; (8000ad0 <GPIO_Init+0x1c4>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a58      	ldr	r2, [pc, #352]	; (8000ad0 <GPIO_Init+0x1c4>)
 8000970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b56      	ldr	r3, [pc, #344]	; (8000ad0 <GPIO_Init+0x1c4>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	4b52      	ldr	r3, [pc, #328]	; (8000ad0 <GPIO_Init+0x1c4>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a51      	ldr	r2, [pc, #324]	; (8000ad0 <GPIO_Init+0x1c4>)
 800098c:	f043 0310 	orr.w	r3, r3, #16
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b4f      	ldr	r3, [pc, #316]	; (8000ad0 <GPIO_Init+0x1c4>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0310 	and.w	r3, r3, #16
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	4b4b      	ldr	r3, [pc, #300]	; (8000ad0 <GPIO_Init+0x1c4>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a4a      	ldr	r2, [pc, #296]	; (8000ad0 <GPIO_Init+0x1c4>)
 80009a8:	f043 0308 	orr.w	r3, r3, #8
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b48      	ldr	r3, [pc, #288]	; (8000ad0 <GPIO_Init+0x1c4>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0308 	and.w	r3, r3, #8
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	4b44      	ldr	r3, [pc, #272]	; (8000ad0 <GPIO_Init+0x1c4>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a43      	ldr	r2, [pc, #268]	; (8000ad0 <GPIO_Init+0x1c4>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b41      	ldr	r3, [pc, #260]	; (8000ad0 <GPIO_Init+0x1c4>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b3d      	ldr	r3, [pc, #244]	; (8000ad0 <GPIO_Init+0x1c4>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a3c      	ldr	r2, [pc, #240]	; (8000ad0 <GPIO_Init+0x1c4>)
 80009e0:	f043 0302 	orr.w	r3, r3, #2
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b3a      	ldr	r3, [pc, #232]	; (8000ad0 <GPIO_Init+0x1c4>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]

	__HAL_RCC_FMC_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	4b36      	ldr	r3, [pc, #216]	; (8000ad0 <GPIO_Init+0x1c4>)
 80009f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009fa:	4a35      	ldr	r2, [pc, #212]	; (8000ad0 <GPIO_Init+0x1c4>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	6393      	str	r3, [r2, #56]	; 0x38
 8000a02:	4b33      	ldr	r3, [pc, #204]	; (8000ad0 <GPIO_Init+0x1c4>)
 8000a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]
	 PG15   ------> FMC_SDNCAS
	 PE0   ------> FMC_NBL0
	 PE1   ------> FMC_NBL1
	 */

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12
 8000a1e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
			| GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	2302      	movs	r3, #2
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a30:	230c      	movs	r3, #12
 8000a32:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4826      	ldr	r0, [pc, #152]	; (8000ad4 <GPIO_Init+0x1c8>)
 8000a3c:	f000 fb34 	bl	80010a8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3;
 8000a40:	230d      	movs	r3, #13
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a50:	230c      	movs	r3, #12
 8000a52:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a58:	4619      	mov	r1, r3
 8000a5a:	481f      	ldr	r0, [pc, #124]	; (8000ad8 <GPIO_Init+0x1cc>)
 8000a5c:	f000 fb24 	bl	80010a8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 8000a60:	f248 1337 	movw	r3, #33079	; 0x8137
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a72:	230c      	movs	r3, #12
 8000a74:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4817      	ldr	r0, [pc, #92]	; (8000adc <GPIO_Init+0x1d0>)
 8000a7e:	f000 fb13 	bl	80010a8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14
 8000a82:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
			| GPIO_PIN_15 | GPIO_PIN_0 | GPIO_PIN_1;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a90:	2303      	movs	r3, #3
 8000a92:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a94:	230c      	movs	r3, #12
 8000a96:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4810      	ldr	r0, [pc, #64]	; (8000ae0 <GPIO_Init+0x1d4>)
 8000aa0:	f000 fb02 	bl	80010a8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_0 | GPIO_PIN_1;
 8000aa4:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ab6:	230c      	movs	r3, #12
 8000ab8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4808      	ldr	r0, [pc, #32]	; (8000ae4 <GPIO_Init+0x1d8>)
 8000ac2:	f000 faf1 	bl	80010a8 <HAL_GPIO_Init>

}
 8000ac6:	bf00      	nop
 8000ac8:	3738      	adds	r7, #56	; 0x38
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40021400 	.word	0x40021400
 8000ad8:	40020800 	.word	0x40020800
 8000adc:	40021800 	.word	0x40021800
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	40020c00 	.word	0x40020c00

08000ae8 <HAL_MspInit>:
#include "main.h"

void HAL_MspInit(void) {
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <HAL_MspInit+0x4c>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <HAL_MspInit+0x4c>)
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afc:	6453      	str	r3, [r2, #68]	; 0x44
 8000afe:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800

08000b38 <HAL_FMC_MspInit>:

static void HAL_FMC_MspInit(void) {
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram) {
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
	HAL_FMC_MspInit();
 8000b4e:	f7ff fff3 	bl	8000b38 <HAL_FMC_MspInit>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <NMI_Handler+0x4>

08000b60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <HardFault_Handler+0x4>

08000b66 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <MemManage_Handler+0x4>

08000b6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <BusFault_Handler+0x4>

08000b72 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <UsageFault_Handler+0x4>

08000b78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba6:	f000 f955 	bl	8000e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}

08000bae <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  return 1;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <_kill>:

int _kill(int pid, int sig)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
 8000bc6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000bc8:	f001 fbea 	bl	80023a0 <__errno>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2216      	movs	r2, #22
 8000bd0:	601a      	str	r2, [r3, #0]
  return -1;
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <_exit>:

void _exit (int status)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000be6:	f04f 31ff 	mov.w	r1, #4294967295
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff ffe7 	bl	8000bbe <_kill>
  while (1) {}    /* Make sure we hang here */
 8000bf0:	e7fe      	b.n	8000bf0 <_exit+0x12>

08000bf2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b086      	sub	sp, #24
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	60f8      	str	r0, [r7, #12]
 8000bfa:	60b9      	str	r1, [r7, #8]
 8000bfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
 8000c02:	e00a      	b.n	8000c1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c04:	f3af 8000 	nop.w
 8000c08:	4601      	mov	r1, r0
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	1c5a      	adds	r2, r3, #1
 8000c0e:	60ba      	str	r2, [r7, #8]
 8000c10:	b2ca      	uxtb	r2, r1
 8000c12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	3301      	adds	r3, #1
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	697a      	ldr	r2, [r7, #20]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	dbf0      	blt.n	8000c04 <_read+0x12>
  }

  return len;
 8000c22:	687b      	ldr	r3, [r7, #4]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	e009      	b.n	8000c52 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	1c5a      	adds	r2, r3, #1
 8000c42:	60ba      	str	r2, [r7, #8]
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	697a      	ldr	r2, [r7, #20]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	dbf1      	blt.n	8000c3e <_write+0x12>
  }
  return len;
 8000c5a:	687b      	ldr	r3, [r7, #4]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <_close>:

int _close(int file)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c8c:	605a      	str	r2, [r3, #4]
  return 0;
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <_isatty>:

int _isatty(int file)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ca4:	2301      	movs	r3, #1
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b085      	sub	sp, #20
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cbe:	2300      	movs	r3, #0
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd4:	4a14      	ldr	r2, [pc, #80]	; (8000d28 <_sbrk+0x5c>)
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <_sbrk+0x60>)
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce0:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d102      	bne.n	8000cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <_sbrk+0x64>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <_sbrk+0x68>)
 8000cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d207      	bcs.n	8000d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cfc:	f001 fb50 	bl	80023a0 <__errno>
 8000d00:	4603      	mov	r3, r0
 8000d02:	220c      	movs	r2, #12
 8000d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	e009      	b.n	8000d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d12:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <_sbrk+0x64>)
 8000d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20030000 	.word	0x20030000
 8000d2c:	00000400 	.word	0x00000400
 8000d30:	200000b8 	.word	0x200000b8
 8000d34:	20000210 	.word	0x20000210

08000d38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <SystemInit+0x20>)
 8000d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d42:	4a05      	ldr	r2, [pc, #20]	; (8000d58 <SystemInit+0x20>)
 8000d44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d60:	480d      	ldr	r0, [pc, #52]	; (8000d98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d62:	490e      	ldr	r1, [pc, #56]	; (8000d9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d64:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d68:	e002      	b.n	8000d70 <LoopCopyDataInit>

08000d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6e:	3304      	adds	r3, #4

08000d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d74:	d3f9      	bcc.n	8000d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d76:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d78:	4c0b      	ldr	r4, [pc, #44]	; (8000da8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d7c:	e001      	b.n	8000d82 <LoopFillZerobss>

08000d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d80:	3204      	adds	r2, #4

08000d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d84:	d3fb      	bcc.n	8000d7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d86:	f7ff ffd7 	bl	8000d38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d8a:	f001 fb0f 	bl	80023ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d8e:	f7ff fbfd 	bl	800058c <main>
  bx  lr    
 8000d92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d94:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d9c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000da0:	0800315c 	.word	0x0800315c
  ldr r2, =_sbss
 8000da4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000da8:	2000020c 	.word	0x2000020c

08000dac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dac:	e7fe      	b.n	8000dac <ADC_IRQHandler>
	...

08000db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db4:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <HAL_Init+0x40>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a0d      	ldr	r2, [pc, #52]	; (8000df0 <HAL_Init+0x40>)
 8000dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <HAL_Init+0x40>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <HAL_Init+0x40>)
 8000dc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <HAL_Init+0x40>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <HAL_Init+0x40>)
 8000dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f000 f931 	bl	8001040 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dde:	200f      	movs	r0, #15
 8000de0:	f000 f808 	bl	8000df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de4:	f7ff fe80 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40023c00 	.word	0x40023c00

08000df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <HAL_InitTick+0x54>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <HAL_InitTick+0x58>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4619      	mov	r1, r3
 8000e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f93b 	bl	800108e <HAL_SYSTICK_Config>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e00e      	b.n	8000e40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2b0f      	cmp	r3, #15
 8000e26:	d80a      	bhi.n	8000e3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e30:	f000 f911 	bl	8001056 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e34:	4a06      	ldr	r2, [pc, #24]	; (8000e50 <HAL_InitTick+0x5c>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e000      	b.n	8000e40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	20000004 	.word	0x20000004

08000e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_IncTick+0x20>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_IncTick+0x24>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4413      	add	r3, r2
 8000e64:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <HAL_IncTick+0x24>)
 8000e66:	6013      	str	r3, [r2, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000008 	.word	0x20000008
 8000e78:	200000bc 	.word	0x200000bc

08000e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <HAL_GetTick+0x14>)
 8000e82:	681b      	ldr	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	200000bc 	.word	0x200000bc

08000e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e9c:	f7ff ffee 	bl	8000e7c <HAL_GetTick>
 8000ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eac:	d005      	beq.n	8000eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <HAL_Delay+0x44>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eba:	bf00      	nop
 8000ebc:	f7ff ffde 	bl	8000e7c <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d8f7      	bhi.n	8000ebc <HAL_Delay+0x28>
  {
  }
}
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000008 	.word	0x20000008

08000edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0e:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	60d3      	str	r3, [r2, #12]
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <__NVIC_GetPriorityGrouping+0x18>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	0a1b      	lsrs	r3, r3, #8
 8000f2e:	f003 0307 	and.w	r3, r3, #7
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	6039      	str	r1, [r7, #0]
 8000f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	db0a      	blt.n	8000f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	490c      	ldr	r1, [pc, #48]	; (8000f8c <__NVIC_SetPriority+0x4c>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	0112      	lsls	r2, r2, #4
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	440b      	add	r3, r1
 8000f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f68:	e00a      	b.n	8000f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4908      	ldr	r1, [pc, #32]	; (8000f90 <__NVIC_SetPriority+0x50>)
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	f003 030f 	and.w	r3, r3, #15
 8000f76:	3b04      	subs	r3, #4
 8000f78:	0112      	lsls	r2, r2, #4
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	761a      	strb	r2, [r3, #24]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000e100 	.word	0xe000e100
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	; 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f1c3 0307 	rsb	r3, r3, #7
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	bf28      	it	cs
 8000fb2:	2304      	movcs	r3, #4
 8000fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	2b06      	cmp	r3, #6
 8000fbc:	d902      	bls.n	8000fc4 <NVIC_EncodePriority+0x30>
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3b03      	subs	r3, #3
 8000fc2:	e000      	b.n	8000fc6 <NVIC_EncodePriority+0x32>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	401a      	ands	r2, r3
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe6:	43d9      	mvns	r1, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	4313      	orrs	r3, r2
         );
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3724      	adds	r7, #36	; 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800100c:	d301      	bcc.n	8001012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100e:	2301      	movs	r3, #1
 8001010:	e00f      	b.n	8001032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001012:	4a0a      	ldr	r2, [pc, #40]	; (800103c <SysTick_Config+0x40>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800101a:	210f      	movs	r1, #15
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f7ff ff8e 	bl	8000f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <SysTick_Config+0x40>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102a:	4b04      	ldr	r3, [pc, #16]	; (800103c <SysTick_Config+0x40>)
 800102c:	2207      	movs	r2, #7
 800102e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	e000e010 	.word	0xe000e010

08001040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff47 	bl	8000edc <__NVIC_SetPriorityGrouping>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001056:	b580      	push	{r7, lr}
 8001058:	b086      	sub	sp, #24
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
 8001062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001068:	f7ff ff5c 	bl	8000f24 <__NVIC_GetPriorityGrouping>
 800106c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	6978      	ldr	r0, [r7, #20]
 8001074:	f7ff ff8e 	bl	8000f94 <NVIC_EncodePriority>
 8001078:	4602      	mov	r2, r0
 800107a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107e:	4611      	mov	r1, r2
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff5d 	bl	8000f40 <__NVIC_SetPriority>
}
 8001086:	bf00      	nop
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff ffb0 	bl	8000ffc <SysTick_Config>
 800109c:	4603      	mov	r3, r0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b089      	sub	sp, #36	; 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
 80010c2:	e177      	b.n	80013b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010c4:	2201      	movs	r2, #1
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	429a      	cmp	r2, r3
 80010de:	f040 8166 	bne.w	80013ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d005      	beq.n	80010fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d130      	bne.n	800115c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	2203      	movs	r2, #3
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	68da      	ldr	r2, [r3, #12]
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001130:	2201      	movs	r2, #1
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	091b      	lsrs	r3, r3, #4
 8001146:	f003 0201 	and.w	r2, r3, #1
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	2b03      	cmp	r3, #3
 8001166:	d017      	beq.n	8001198 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	2203      	movs	r2, #3
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d123      	bne.n	80011ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	08da      	lsrs	r2, r3, #3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3208      	adds	r2, #8
 80011ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	f003 0307 	and.w	r3, r3, #7
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	220f      	movs	r2, #15
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	691a      	ldr	r2, [r3, #16]
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	08da      	lsrs	r2, r3, #3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3208      	adds	r2, #8
 80011e6:	69b9      	ldr	r1, [r7, #24]
 80011e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	2203      	movs	r2, #3
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0203 	and.w	r2, r3, #3
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001228:	2b00      	cmp	r3, #0
 800122a:	f000 80c0 	beq.w	80013ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b66      	ldr	r3, [pc, #408]	; (80013cc <HAL_GPIO_Init+0x324>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	4a65      	ldr	r2, [pc, #404]	; (80013cc <HAL_GPIO_Init+0x324>)
 8001238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800123c:	6453      	str	r3, [r2, #68]	; 0x44
 800123e:	4b63      	ldr	r3, [pc, #396]	; (80013cc <HAL_GPIO_Init+0x324>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800124a:	4a61      	ldr	r2, [pc, #388]	; (80013d0 <HAL_GPIO_Init+0x328>)
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	3302      	adds	r3, #2
 8001252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f003 0303 	and.w	r3, r3, #3
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	220f      	movs	r2, #15
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a58      	ldr	r2, [pc, #352]	; (80013d4 <HAL_GPIO_Init+0x32c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d037      	beq.n	80012e6 <HAL_GPIO_Init+0x23e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a57      	ldr	r2, [pc, #348]	; (80013d8 <HAL_GPIO_Init+0x330>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d031      	beq.n	80012e2 <HAL_GPIO_Init+0x23a>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a56      	ldr	r2, [pc, #344]	; (80013dc <HAL_GPIO_Init+0x334>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d02b      	beq.n	80012de <HAL_GPIO_Init+0x236>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a55      	ldr	r2, [pc, #340]	; (80013e0 <HAL_GPIO_Init+0x338>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d025      	beq.n	80012da <HAL_GPIO_Init+0x232>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a54      	ldr	r2, [pc, #336]	; (80013e4 <HAL_GPIO_Init+0x33c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d01f      	beq.n	80012d6 <HAL_GPIO_Init+0x22e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a53      	ldr	r2, [pc, #332]	; (80013e8 <HAL_GPIO_Init+0x340>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d019      	beq.n	80012d2 <HAL_GPIO_Init+0x22a>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a52      	ldr	r2, [pc, #328]	; (80013ec <HAL_GPIO_Init+0x344>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d013      	beq.n	80012ce <HAL_GPIO_Init+0x226>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a51      	ldr	r2, [pc, #324]	; (80013f0 <HAL_GPIO_Init+0x348>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d00d      	beq.n	80012ca <HAL_GPIO_Init+0x222>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a50      	ldr	r2, [pc, #320]	; (80013f4 <HAL_GPIO_Init+0x34c>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d007      	beq.n	80012c6 <HAL_GPIO_Init+0x21e>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a4f      	ldr	r2, [pc, #316]	; (80013f8 <HAL_GPIO_Init+0x350>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d101      	bne.n	80012c2 <HAL_GPIO_Init+0x21a>
 80012be:	2309      	movs	r3, #9
 80012c0:	e012      	b.n	80012e8 <HAL_GPIO_Init+0x240>
 80012c2:	230a      	movs	r3, #10
 80012c4:	e010      	b.n	80012e8 <HAL_GPIO_Init+0x240>
 80012c6:	2308      	movs	r3, #8
 80012c8:	e00e      	b.n	80012e8 <HAL_GPIO_Init+0x240>
 80012ca:	2307      	movs	r3, #7
 80012cc:	e00c      	b.n	80012e8 <HAL_GPIO_Init+0x240>
 80012ce:	2306      	movs	r3, #6
 80012d0:	e00a      	b.n	80012e8 <HAL_GPIO_Init+0x240>
 80012d2:	2305      	movs	r3, #5
 80012d4:	e008      	b.n	80012e8 <HAL_GPIO_Init+0x240>
 80012d6:	2304      	movs	r3, #4
 80012d8:	e006      	b.n	80012e8 <HAL_GPIO_Init+0x240>
 80012da:	2303      	movs	r3, #3
 80012dc:	e004      	b.n	80012e8 <HAL_GPIO_Init+0x240>
 80012de:	2302      	movs	r3, #2
 80012e0:	e002      	b.n	80012e8 <HAL_GPIO_Init+0x240>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <HAL_GPIO_Init+0x240>
 80012e6:	2300      	movs	r3, #0
 80012e8:	69fa      	ldr	r2, [r7, #28]
 80012ea:	f002 0203 	and.w	r2, r2, #3
 80012ee:	0092      	lsls	r2, r2, #2
 80012f0:	4093      	lsls	r3, r2
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012f8:	4935      	ldr	r1, [pc, #212]	; (80013d0 <HAL_GPIO_Init+0x328>)
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	089b      	lsrs	r3, r3, #2
 80012fe:	3302      	adds	r3, #2
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001306:	4b3d      	ldr	r3, [pc, #244]	; (80013fc <HAL_GPIO_Init+0x354>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800132a:	4a34      	ldr	r2, [pc, #208]	; (80013fc <HAL_GPIO_Init+0x354>)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001330:	4b32      	ldr	r3, [pc, #200]	; (80013fc <HAL_GPIO_Init+0x354>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001354:	4a29      	ldr	r2, [pc, #164]	; (80013fc <HAL_GPIO_Init+0x354>)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800135a:	4b28      	ldr	r3, [pc, #160]	; (80013fc <HAL_GPIO_Init+0x354>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	43db      	mvns	r3, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4013      	ands	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800137e:	4a1f      	ldr	r2, [pc, #124]	; (80013fc <HAL_GPIO_Init+0x354>)
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001384:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <HAL_GPIO_Init+0x354>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013a8:	4a14      	ldr	r2, [pc, #80]	; (80013fc <HAL_GPIO_Init+0x354>)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3301      	adds	r3, #1
 80013b2:	61fb      	str	r3, [r7, #28]
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	2b0f      	cmp	r3, #15
 80013b8:	f67f ae84 	bls.w	80010c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	3724      	adds	r7, #36	; 0x24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40013800 	.word	0x40013800
 80013d4:	40020000 	.word	0x40020000
 80013d8:	40020400 	.word	0x40020400
 80013dc:	40020800 	.word	0x40020800
 80013e0:	40020c00 	.word	0x40020c00
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40021400 	.word	0x40021400
 80013ec:	40021800 	.word	0x40021800
 80013f0:	40021c00 	.word	0x40021c00
 80013f4:	40022000 	.word	0x40022000
 80013f8:	40022400 	.word	0x40022400
 80013fc:	40013c00 	.word	0x40013c00

08001400 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	603b      	str	r3, [r7, #0]
 800140e:	4b20      	ldr	r3, [pc, #128]	; (8001490 <HAL_PWREx_EnableOverDrive+0x90>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	4a1f      	ldr	r2, [pc, #124]	; (8001490 <HAL_PWREx_EnableOverDrive+0x90>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001418:	6413      	str	r3, [r2, #64]	; 0x40
 800141a:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <HAL_PWREx_EnableOverDrive+0x90>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001426:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <HAL_PWREx_EnableOverDrive+0x94>)
 8001428:	2201      	movs	r2, #1
 800142a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800142c:	f7ff fd26 	bl	8000e7c <HAL_GetTick>
 8001430:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001432:	e009      	b.n	8001448 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001434:	f7ff fd22 	bl	8000e7c <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001442:	d901      	bls.n	8001448 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e01f      	b.n	8001488 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001448:	4b13      	ldr	r3, [pc, #76]	; (8001498 <HAL_PWREx_EnableOverDrive+0x98>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001454:	d1ee      	bne.n	8001434 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001456:	4b11      	ldr	r3, [pc, #68]	; (800149c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001458:	2201      	movs	r2, #1
 800145a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800145c:	f7ff fd0e 	bl	8000e7c <HAL_GetTick>
 8001460:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001462:	e009      	b.n	8001478 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001464:	f7ff fd0a 	bl	8000e7c <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001472:	d901      	bls.n	8001478 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e007      	b.n	8001488 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001478:	4b07      	ldr	r3, [pc, #28]	; (8001498 <HAL_PWREx_EnableOverDrive+0x98>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001480:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001484:	d1ee      	bne.n	8001464 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40023800 	.word	0x40023800
 8001494:	420e0040 	.word	0x420e0040
 8001498:	40007000 	.word	0x40007000
 800149c:	420e0044 	.word	0x420e0044

080014a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e267      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d075      	beq.n	80015aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014be:	4b88      	ldr	r3, [pc, #544]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	d00c      	beq.n	80014e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ca:	4b85      	ldr	r3, [pc, #532]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014d2:	2b08      	cmp	r3, #8
 80014d4:	d112      	bne.n	80014fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014d6:	4b82      	ldr	r3, [pc, #520]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014e2:	d10b      	bne.n	80014fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e4:	4b7e      	ldr	r3, [pc, #504]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d05b      	beq.n	80015a8 <HAL_RCC_OscConfig+0x108>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d157      	bne.n	80015a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e242      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001504:	d106      	bne.n	8001514 <HAL_RCC_OscConfig+0x74>
 8001506:	4b76      	ldr	r3, [pc, #472]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a75      	ldr	r2, [pc, #468]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 800150c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	e01d      	b.n	8001550 <HAL_RCC_OscConfig+0xb0>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800151c:	d10c      	bne.n	8001538 <HAL_RCC_OscConfig+0x98>
 800151e:	4b70      	ldr	r3, [pc, #448]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a6f      	ldr	r2, [pc, #444]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	4b6d      	ldr	r3, [pc, #436]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a6c      	ldr	r2, [pc, #432]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	e00b      	b.n	8001550 <HAL_RCC_OscConfig+0xb0>
 8001538:	4b69      	ldr	r3, [pc, #420]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a68      	ldr	r2, [pc, #416]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 800153e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	4b66      	ldr	r3, [pc, #408]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a65      	ldr	r2, [pc, #404]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 800154a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800154e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d013      	beq.n	8001580 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001558:	f7ff fc90 	bl	8000e7c <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001560:	f7ff fc8c 	bl	8000e7c <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b64      	cmp	r3, #100	; 0x64
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e207      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001572:	4b5b      	ldr	r3, [pc, #364]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0xc0>
 800157e:	e014      	b.n	80015aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff fc7c 	bl	8000e7c <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001588:	f7ff fc78 	bl	8000e7c <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	; 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e1f3      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159a:	4b51      	ldr	r3, [pc, #324]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0xe8>
 80015a6:	e000      	b.n	80015aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d063      	beq.n	800167e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015b6:	4b4a      	ldr	r3, [pc, #296]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 030c 	and.w	r3, r3, #12
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00b      	beq.n	80015da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015c2:	4b47      	ldr	r3, [pc, #284]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d11c      	bne.n	8001608 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ce:	4b44      	ldr	r3, [pc, #272]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d116      	bne.n	8001608 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015da:	4b41      	ldr	r3, [pc, #260]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d005      	beq.n	80015f2 <HAL_RCC_OscConfig+0x152>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d001      	beq.n	80015f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e1c7      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f2:	4b3b      	ldr	r3, [pc, #236]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	4937      	ldr	r1, [pc, #220]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001602:	4313      	orrs	r3, r2
 8001604:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001606:	e03a      	b.n	800167e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d020      	beq.n	8001652 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001610:	4b34      	ldr	r3, [pc, #208]	; (80016e4 <HAL_RCC_OscConfig+0x244>)
 8001612:	2201      	movs	r2, #1
 8001614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001616:	f7ff fc31 	bl	8000e7c <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800161e:	f7ff fc2d 	bl	8000e7c <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e1a8      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001630:	4b2b      	ldr	r3, [pc, #172]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0f0      	beq.n	800161e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800163c:	4b28      	ldr	r3, [pc, #160]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	4925      	ldr	r1, [pc, #148]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 800164c:	4313      	orrs	r3, r2
 800164e:	600b      	str	r3, [r1, #0]
 8001650:	e015      	b.n	800167e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001652:	4b24      	ldr	r3, [pc, #144]	; (80016e4 <HAL_RCC_OscConfig+0x244>)
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7ff fc10 	bl	8000e7c <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001660:	f7ff fc0c 	bl	8000e7c <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e187      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001672:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0308 	and.w	r3, r3, #8
 8001686:	2b00      	cmp	r3, #0
 8001688:	d036      	beq.n	80016f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d016      	beq.n	80016c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <HAL_RCC_OscConfig+0x248>)
 8001694:	2201      	movs	r2, #1
 8001696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001698:	f7ff fbf0 	bl	8000e7c <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016a0:	f7ff fbec 	bl	8000e7c <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e167      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b2:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 80016b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0x200>
 80016be:	e01b      	b.n	80016f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <HAL_RCC_OscConfig+0x248>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c6:	f7ff fbd9 	bl	8000e7c <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016cc:	e00e      	b.n	80016ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ce:	f7ff fbd5 	bl	8000e7c <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d907      	bls.n	80016ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e150      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
 80016e0:	40023800 	.word	0x40023800
 80016e4:	42470000 	.word	0x42470000
 80016e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ec:	4b88      	ldr	r3, [pc, #544]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 80016ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1ea      	bne.n	80016ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 8097 	beq.w	8001834 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800170a:	4b81      	ldr	r3, [pc, #516]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10f      	bne.n	8001736 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	4b7d      	ldr	r3, [pc, #500]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	4a7c      	ldr	r2, [pc, #496]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 8001720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001724:	6413      	str	r3, [r2, #64]	; 0x40
 8001726:	4b7a      	ldr	r3, [pc, #488]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001732:	2301      	movs	r3, #1
 8001734:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001736:	4b77      	ldr	r3, [pc, #476]	; (8001914 <HAL_RCC_OscConfig+0x474>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173e:	2b00      	cmp	r3, #0
 8001740:	d118      	bne.n	8001774 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001742:	4b74      	ldr	r3, [pc, #464]	; (8001914 <HAL_RCC_OscConfig+0x474>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a73      	ldr	r2, [pc, #460]	; (8001914 <HAL_RCC_OscConfig+0x474>)
 8001748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800174e:	f7ff fb95 	bl	8000e7c <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001756:	f7ff fb91 	bl	8000e7c <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e10c      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001768:	4b6a      	ldr	r3, [pc, #424]	; (8001914 <HAL_RCC_OscConfig+0x474>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0f0      	beq.n	8001756 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d106      	bne.n	800178a <HAL_RCC_OscConfig+0x2ea>
 800177c:	4b64      	ldr	r3, [pc, #400]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 800177e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001780:	4a63      	ldr	r2, [pc, #396]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6713      	str	r3, [r2, #112]	; 0x70
 8001788:	e01c      	b.n	80017c4 <HAL_RCC_OscConfig+0x324>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2b05      	cmp	r3, #5
 8001790:	d10c      	bne.n	80017ac <HAL_RCC_OscConfig+0x30c>
 8001792:	4b5f      	ldr	r3, [pc, #380]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 8001794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001796:	4a5e      	ldr	r2, [pc, #376]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 8001798:	f043 0304 	orr.w	r3, r3, #4
 800179c:	6713      	str	r3, [r2, #112]	; 0x70
 800179e:	4b5c      	ldr	r3, [pc, #368]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 80017a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a2:	4a5b      	ldr	r2, [pc, #364]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6713      	str	r3, [r2, #112]	; 0x70
 80017aa:	e00b      	b.n	80017c4 <HAL_RCC_OscConfig+0x324>
 80017ac:	4b58      	ldr	r3, [pc, #352]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 80017ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b0:	4a57      	ldr	r2, [pc, #348]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 80017b2:	f023 0301 	bic.w	r3, r3, #1
 80017b6:	6713      	str	r3, [r2, #112]	; 0x70
 80017b8:	4b55      	ldr	r3, [pc, #340]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 80017ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017bc:	4a54      	ldr	r2, [pc, #336]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 80017be:	f023 0304 	bic.w	r3, r3, #4
 80017c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d015      	beq.n	80017f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017cc:	f7ff fb56 	bl	8000e7c <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d2:	e00a      	b.n	80017ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d4:	f7ff fb52 	bl	8000e7c <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e0cb      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ea:	4b49      	ldr	r3, [pc, #292]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 80017ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0ee      	beq.n	80017d4 <HAL_RCC_OscConfig+0x334>
 80017f6:	e014      	b.n	8001822 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f8:	f7ff fb40 	bl	8000e7c <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017fe:	e00a      	b.n	8001816 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001800:	f7ff fb3c 	bl	8000e7c <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	f241 3288 	movw	r2, #5000	; 0x1388
 800180e:	4293      	cmp	r3, r2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e0b5      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001816:	4b3e      	ldr	r3, [pc, #248]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 8001818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1ee      	bne.n	8001800 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001822:	7dfb      	ldrb	r3, [r7, #23]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d105      	bne.n	8001834 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001828:	4b39      	ldr	r3, [pc, #228]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	4a38      	ldr	r2, [pc, #224]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 800182e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001832:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 80a1 	beq.w	8001980 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800183e:	4b34      	ldr	r3, [pc, #208]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 030c 	and.w	r3, r3, #12
 8001846:	2b08      	cmp	r3, #8
 8001848:	d05c      	beq.n	8001904 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d141      	bne.n	80018d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001852:	4b31      	ldr	r3, [pc, #196]	; (8001918 <HAL_RCC_OscConfig+0x478>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001858:	f7ff fb10 	bl	8000e7c <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001860:	f7ff fb0c 	bl	8000e7c <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e087      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001872:	4b27      	ldr	r3, [pc, #156]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69da      	ldr	r2, [r3, #28]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	019b      	lsls	r3, r3, #6
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001894:	085b      	lsrs	r3, r3, #1
 8001896:	3b01      	subs	r3, #1
 8001898:	041b      	lsls	r3, r3, #16
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a0:	061b      	lsls	r3, r3, #24
 80018a2:	491b      	ldr	r1, [pc, #108]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018a8:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <HAL_RCC_OscConfig+0x478>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ae:	f7ff fae5 	bl	8000e7c <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b6:	f7ff fae1 	bl	8000e7c <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e05c      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0f0      	beq.n	80018b6 <HAL_RCC_OscConfig+0x416>
 80018d4:	e054      	b.n	8001980 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_RCC_OscConfig+0x478>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018dc:	f7ff face 	bl	8000e7c <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e4:	f7ff faca 	bl	8000e7c <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e045      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x444>
 8001902:	e03d      	b.n	8001980 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d107      	bne.n	800191c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e038      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
 8001910:	40023800 	.word	0x40023800
 8001914:	40007000 	.word	0x40007000
 8001918:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800191c:	4b1b      	ldr	r3, [pc, #108]	; (800198c <HAL_RCC_OscConfig+0x4ec>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d028      	beq.n	800197c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001934:	429a      	cmp	r2, r3
 8001936:	d121      	bne.n	800197c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001942:	429a      	cmp	r2, r3
 8001944:	d11a      	bne.n	800197c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800194c:	4013      	ands	r3, r2
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001952:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001954:	4293      	cmp	r3, r2
 8001956:	d111      	bne.n	800197c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001962:	085b      	lsrs	r3, r3, #1
 8001964:	3b01      	subs	r3, #1
 8001966:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001968:	429a      	cmp	r2, r3
 800196a:	d107      	bne.n	800197c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001976:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001978:	429a      	cmp	r2, r3
 800197a:	d001      	beq.n	8001980 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e000      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800

08001990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e0cc      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019a4:	4b68      	ldr	r3, [pc, #416]	; (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 030f 	and.w	r3, r3, #15
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d90c      	bls.n	80019cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b2:	4b65      	ldr	r3, [pc, #404]	; (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ba:	4b63      	ldr	r3, [pc, #396]	; (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d001      	beq.n	80019cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e0b8      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d020      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d005      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019e4:	4b59      	ldr	r3, [pc, #356]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	4a58      	ldr	r2, [pc, #352]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d005      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019fc:	4b53      	ldr	r3, [pc, #332]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	4a52      	ldr	r2, [pc, #328]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a08:	4b50      	ldr	r3, [pc, #320]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	494d      	ldr	r1, [pc, #308]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d044      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d107      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2e:	4b47      	ldr	r3, [pc, #284]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d119      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e07f      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d003      	beq.n	8001a4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d107      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a4e:	4b3f      	ldr	r3, [pc, #252]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d109      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e06f      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5e:	4b3b      	ldr	r3, [pc, #236]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e067      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a6e:	4b37      	ldr	r3, [pc, #220]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f023 0203 	bic.w	r2, r3, #3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	4934      	ldr	r1, [pc, #208]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a80:	f7ff f9fc 	bl	8000e7c <HAL_GetTick>
 8001a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a86:	e00a      	b.n	8001a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a88:	f7ff f9f8 	bl	8000e7c <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e04f      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9e:	4b2b      	ldr	r3, [pc, #172]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 020c 	and.w	r2, r3, #12
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d1eb      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab0:	4b25      	ldr	r3, [pc, #148]	; (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 030f 	and.w	r3, r3, #15
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d20c      	bcs.n	8001ad8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001abe:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac6:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d001      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e032      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d008      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae4:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	4916      	ldr	r1, [pc, #88]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d009      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b02:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	490e      	ldr	r1, [pc, #56]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b16:	f000 f821 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	091b      	lsrs	r3, r3, #4
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	490a      	ldr	r1, [pc, #40]	; (8001b50 <HAL_RCC_ClockConfig+0x1c0>)
 8001b28:	5ccb      	ldrb	r3, [r1, r3]
 8001b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2e:	4a09      	ldr	r2, [pc, #36]	; (8001b54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <HAL_RCC_ClockConfig+0x1c8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff f95c 	bl	8000df4 <HAL_InitTick>

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40023c00 	.word	0x40023c00
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	0800305c 	.word	0x0800305c
 8001b54:	20000000 	.word	0x20000000
 8001b58:	20000004 	.word	0x20000004

08001b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b60:	b094      	sub	sp, #80	; 0x50
 8001b62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	647b      	str	r3, [r7, #68]	; 0x44
 8001b68:	2300      	movs	r3, #0
 8001b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b74:	4b79      	ldr	r3, [pc, #484]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 030c 	and.w	r3, r3, #12
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d00d      	beq.n	8001b9c <HAL_RCC_GetSysClockFreq+0x40>
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	f200 80e1 	bhi.w	8001d48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <HAL_RCC_GetSysClockFreq+0x34>
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	d003      	beq.n	8001b96 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b8e:	e0db      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b90:	4b73      	ldr	r3, [pc, #460]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b92:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b94:	e0db      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b96:	4b73      	ldr	r3, [pc, #460]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b9a:	e0d8      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b9c:	4b6f      	ldr	r3, [pc, #444]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ba4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ba6:	4b6d      	ldr	r3, [pc, #436]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d063      	beq.n	8001c7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bb2:	4b6a      	ldr	r3, [pc, #424]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	099b      	lsrs	r3, r3, #6
 8001bb8:	2200      	movs	r2, #0
 8001bba:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bc4:	633b      	str	r3, [r7, #48]	; 0x30
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	637b      	str	r3, [r7, #52]	; 0x34
 8001bca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001bce:	4622      	mov	r2, r4
 8001bd0:	462b      	mov	r3, r5
 8001bd2:	f04f 0000 	mov.w	r0, #0
 8001bd6:	f04f 0100 	mov.w	r1, #0
 8001bda:	0159      	lsls	r1, r3, #5
 8001bdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001be0:	0150      	lsls	r0, r2, #5
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4621      	mov	r1, r4
 8001be8:	1a51      	subs	r1, r2, r1
 8001bea:	6139      	str	r1, [r7, #16]
 8001bec:	4629      	mov	r1, r5
 8001bee:	eb63 0301 	sbc.w	r3, r3, r1
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	f04f 0300 	mov.w	r3, #0
 8001bfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c00:	4659      	mov	r1, fp
 8001c02:	018b      	lsls	r3, r1, #6
 8001c04:	4651      	mov	r1, sl
 8001c06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c0a:	4651      	mov	r1, sl
 8001c0c:	018a      	lsls	r2, r1, #6
 8001c0e:	4651      	mov	r1, sl
 8001c10:	ebb2 0801 	subs.w	r8, r2, r1
 8001c14:	4659      	mov	r1, fp
 8001c16:	eb63 0901 	sbc.w	r9, r3, r1
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c2e:	4690      	mov	r8, r2
 8001c30:	4699      	mov	r9, r3
 8001c32:	4623      	mov	r3, r4
 8001c34:	eb18 0303 	adds.w	r3, r8, r3
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	462b      	mov	r3, r5
 8001c3c:	eb49 0303 	adc.w	r3, r9, r3
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	f04f 0300 	mov.w	r3, #0
 8001c4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c4e:	4629      	mov	r1, r5
 8001c50:	024b      	lsls	r3, r1, #9
 8001c52:	4621      	mov	r1, r4
 8001c54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c58:	4621      	mov	r1, r4
 8001c5a:	024a      	lsls	r2, r1, #9
 8001c5c:	4610      	mov	r0, r2
 8001c5e:	4619      	mov	r1, r3
 8001c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c62:	2200      	movs	r2, #0
 8001c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c6c:	f7fe fb10 	bl	8000290 <__aeabi_uldivmod>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4613      	mov	r3, r2
 8001c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c78:	e058      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c7a:	4b38      	ldr	r3, [pc, #224]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	099b      	lsrs	r3, r3, #6
 8001c80:	2200      	movs	r2, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	4611      	mov	r1, r2
 8001c86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c8a:	623b      	str	r3, [r7, #32]
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c94:	4642      	mov	r2, r8
 8001c96:	464b      	mov	r3, r9
 8001c98:	f04f 0000 	mov.w	r0, #0
 8001c9c:	f04f 0100 	mov.w	r1, #0
 8001ca0:	0159      	lsls	r1, r3, #5
 8001ca2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ca6:	0150      	lsls	r0, r2, #5
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4641      	mov	r1, r8
 8001cae:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cb2:	4649      	mov	r1, r9
 8001cb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	f04f 0300 	mov.w	r3, #0
 8001cc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ccc:	ebb2 040a 	subs.w	r4, r2, sl
 8001cd0:	eb63 050b 	sbc.w	r5, r3, fp
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	f04f 0300 	mov.w	r3, #0
 8001cdc:	00eb      	lsls	r3, r5, #3
 8001cde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ce2:	00e2      	lsls	r2, r4, #3
 8001ce4:	4614      	mov	r4, r2
 8001ce6:	461d      	mov	r5, r3
 8001ce8:	4643      	mov	r3, r8
 8001cea:	18e3      	adds	r3, r4, r3
 8001cec:	603b      	str	r3, [r7, #0]
 8001cee:	464b      	mov	r3, r9
 8001cf0:	eb45 0303 	adc.w	r3, r5, r3
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	f04f 0300 	mov.w	r3, #0
 8001cfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d02:	4629      	mov	r1, r5
 8001d04:	028b      	lsls	r3, r1, #10
 8001d06:	4621      	mov	r1, r4
 8001d08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	028a      	lsls	r2, r1, #10
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d16:	2200      	movs	r2, #0
 8001d18:	61bb      	str	r3, [r7, #24]
 8001d1a:	61fa      	str	r2, [r7, #28]
 8001d1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d20:	f7fe fab6 	bl	8000290 <__aeabi_uldivmod>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4613      	mov	r3, r2
 8001d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	0c1b      	lsrs	r3, r3, #16
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	3301      	adds	r3, #1
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d46:	e002      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3750      	adds	r7, #80	; 0x50
 8001d54:	46bd      	mov	sp, r7
 8001d56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	00f42400 	.word	0x00f42400
 8001d64:	007a1200 	.word	0x007a1200

08001d68 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e025      	b.n	8001dc8 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d106      	bne.n	8001d96 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7fe fed8 	bl	8000b46 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2202      	movs	r2, #2
 8001d9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3304      	adds	r3, #4
 8001da6:	4619      	mov	r1, r3
 8001da8:	4610      	mov	r0, r2
 8001daa:	f000 f86e 	bl	8001e8a <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	461a      	mov	r2, r3
 8001db8:	6839      	ldr	r1, [r7, #0]
 8001dba:	f000 f8c3 	bl	8001f44 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001de2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8001de4:	7dfb      	ldrb	r3, [r7, #23]
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d101      	bne.n	8001dee <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8001dea:	2302      	movs	r3, #2
 8001dec:	e021      	b.n	8001e32 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8001dee:	7dfb      	ldrb	r3, [r7, #23]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d002      	beq.n	8001dfa <HAL_SDRAM_SendCommand+0x2a>
 8001df4:	7dfb      	ldrb	r3, [r7, #23]
 8001df6:	2b05      	cmp	r3, #5
 8001df8:	d118      	bne.n	8001e2c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	68b9      	ldr	r1, [r7, #8]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 f903 	bl	8002016 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d104      	bne.n	8001e22 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2205      	movs	r2, #5
 8001e1c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8001e20:	e006      	b.n	8001e30 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8001e2a:	e001      	b.n	8001e30 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d101      	bne.n	8001e54 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8001e50:	2302      	movs	r3, #2
 8001e52:	e016      	b.n	8001e82 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d10f      	bne.n	8001e80 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2202      	movs	r2, #2
 8001e64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6839      	ldr	r1, [r7, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 f90e 	bl	8002090 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e000      	b.n	8001e82 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
 8001e92:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d123      	bne.n	8001ee4 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001ea4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	6851      	ldr	r1, [r2, #4]
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	6892      	ldr	r2, [r2, #8]
 8001eb0:	4311      	orrs	r1, r2
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	68d2      	ldr	r2, [r2, #12]
 8001eb6:	4311      	orrs	r1, r2
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	6912      	ldr	r2, [r2, #16]
 8001ebc:	4311      	orrs	r1, r2
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	6952      	ldr	r2, [r2, #20]
 8001ec2:	4311      	orrs	r1, r2
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	6992      	ldr	r2, [r2, #24]
 8001ec8:	4311      	orrs	r1, r2
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	69d2      	ldr	r2, [r2, #28]
 8001ece:	4311      	orrs	r1, r2
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	6a12      	ldr	r2, [r2, #32]
 8001ed4:	4311      	orrs	r1, r2
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001eda:	430a      	orrs	r2, r1
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	e028      	b.n	8001f36 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	69d9      	ldr	r1, [r3, #28]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	4319      	orrs	r1, r3
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efa:	430b      	orrs	r3, r1
 8001efc:	431a      	orrs	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001f0a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	6851      	ldr	r1, [r2, #4]
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	6892      	ldr	r2, [r2, #8]
 8001f16:	4311      	orrs	r1, r2
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	68d2      	ldr	r2, [r2, #12]
 8001f1c:	4311      	orrs	r1, r2
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	6912      	ldr	r2, [r2, #16]
 8001f22:	4311      	orrs	r1, r2
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	6952      	ldr	r2, [r2, #20]
 8001f28:	4311      	orrs	r1, r2
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	6992      	ldr	r2, [r2, #24]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	431a      	orrs	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d128      	bne.n	8001fa8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	1e59      	subs	r1, r3, #1
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	011b      	lsls	r3, r3, #4
 8001f6c:	4319      	orrs	r1, r3
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	021b      	lsls	r3, r3, #8
 8001f76:	4319      	orrs	r1, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	031b      	lsls	r3, r3, #12
 8001f80:	4319      	orrs	r1, r3
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	041b      	lsls	r3, r3, #16
 8001f8a:	4319      	orrs	r1, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	051b      	lsls	r3, r3, #20
 8001f94:	4319      	orrs	r1, r3
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	061b      	lsls	r3, r3, #24
 8001f9e:	430b      	orrs	r3, r1
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	609a      	str	r2, [r3, #8]
 8001fa6:	e02f      	b.n	8002008 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001fb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	68d2      	ldr	r2, [r2, #12]
 8001fb8:	3a01      	subs	r2, #1
 8001fba:	0311      	lsls	r1, r2, #12
 8001fbc:	68ba      	ldr	r2, [r7, #8]
 8001fbe:	6952      	ldr	r2, [r2, #20]
 8001fc0:	3a01      	subs	r2, #1
 8001fc2:	0512      	lsls	r2, r2, #20
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	1e59      	subs	r1, r3, #1
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	011b      	lsls	r3, r3, #4
 8001fe2:	4319      	orrs	r1, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	021b      	lsls	r3, r3, #8
 8001fec:	4319      	orrs	r1, r3
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	041b      	lsls	r3, r3, #16
 8001ff6:	4319      	orrs	r1, r3
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	061b      	lsls	r3, r3, #24
 8002000:	430b      	orrs	r3, r1
 8002002:	431a      	orrs	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b086      	sub	sp, #24
 800201a:	af00      	add	r7, sp, #0
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	0d9b      	lsrs	r3, r3, #22
 800202c:	059b      	lsls	r3, r3, #22
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	6811      	ldr	r1, [r2, #0]
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	6852      	ldr	r2, [r2, #4]
 8002036:	4311      	orrs	r1, r2
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	6892      	ldr	r2, [r2, #8]
 800203c:	3a01      	subs	r2, #1
 800203e:	0152      	lsls	r2, r2, #5
 8002040:	4311      	orrs	r1, r2
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	68d2      	ldr	r2, [r2, #12]
 8002046:	0252      	lsls	r2, r2, #9
 8002048:	430a      	orrs	r2, r1
 800204a:	431a      	orrs	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8002050:	f7fe ff14 	bl	8000e7c <HAL_GetTick>
 8002054:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8002056:	e010      	b.n	800207a <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205e:	d00c      	beq.n	800207a <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d007      	beq.n	8002076 <FMC_SDRAM_SendCommand+0x60>
 8002066:	f7fe ff09 	bl	8000e7c <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	429a      	cmp	r2, r3
 8002074:	d201      	bcs.n	800207a <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e006      	b.n	8002088 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	f003 0320 	and.w	r3, r3, #32
 8002082:	2b20      	cmp	r3, #32
 8002084:	d0e8      	beq.n	8002058 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80020a2:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	0052      	lsls	r2, r2, #1
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
	...

080020c0 <srand>:
 80020c0:	b538      	push	{r3, r4, r5, lr}
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <srand+0x44>)
 80020c4:	681d      	ldr	r5, [r3, #0]
 80020c6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80020c8:	4604      	mov	r4, r0
 80020ca:	b9b3      	cbnz	r3, 80020fa <srand+0x3a>
 80020cc:	2018      	movs	r0, #24
 80020ce:	f000 f9fd 	bl	80024cc <malloc>
 80020d2:	4602      	mov	r2, r0
 80020d4:	6328      	str	r0, [r5, #48]	; 0x30
 80020d6:	b920      	cbnz	r0, 80020e2 <srand+0x22>
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <srand+0x48>)
 80020da:	480c      	ldr	r0, [pc, #48]	; (800210c <srand+0x4c>)
 80020dc:	2146      	movs	r1, #70	; 0x46
 80020de:	f000 f98b 	bl	80023f8 <__assert_func>
 80020e2:	490b      	ldr	r1, [pc, #44]	; (8002110 <srand+0x50>)
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <srand+0x54>)
 80020e6:	e9c0 1300 	strd	r1, r3, [r0]
 80020ea:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <srand+0x58>)
 80020ec:	6083      	str	r3, [r0, #8]
 80020ee:	230b      	movs	r3, #11
 80020f0:	8183      	strh	r3, [r0, #12]
 80020f2:	2100      	movs	r1, #0
 80020f4:	2001      	movs	r0, #1
 80020f6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80020fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80020fc:	2200      	movs	r2, #0
 80020fe:	611c      	str	r4, [r3, #16]
 8002100:	615a      	str	r2, [r3, #20]
 8002102:	bd38      	pop	{r3, r4, r5, pc}
 8002104:	20000064 	.word	0x20000064
 8002108:	0800306c 	.word	0x0800306c
 800210c:	08003083 	.word	0x08003083
 8002110:	abcd330e 	.word	0xabcd330e
 8002114:	e66d1234 	.word	0xe66d1234
 8002118:	0005deec 	.word	0x0005deec

0800211c <std>:
 800211c:	2300      	movs	r3, #0
 800211e:	b510      	push	{r4, lr}
 8002120:	4604      	mov	r4, r0
 8002122:	e9c0 3300 	strd	r3, r3, [r0]
 8002126:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800212a:	6083      	str	r3, [r0, #8]
 800212c:	8181      	strh	r1, [r0, #12]
 800212e:	6643      	str	r3, [r0, #100]	; 0x64
 8002130:	81c2      	strh	r2, [r0, #14]
 8002132:	6183      	str	r3, [r0, #24]
 8002134:	4619      	mov	r1, r3
 8002136:	2208      	movs	r2, #8
 8002138:	305c      	adds	r0, #92	; 0x5c
 800213a:	f000 f8e2 	bl	8002302 <memset>
 800213e:	4b05      	ldr	r3, [pc, #20]	; (8002154 <std+0x38>)
 8002140:	6263      	str	r3, [r4, #36]	; 0x24
 8002142:	4b05      	ldr	r3, [pc, #20]	; (8002158 <std+0x3c>)
 8002144:	62a3      	str	r3, [r4, #40]	; 0x28
 8002146:	4b05      	ldr	r3, [pc, #20]	; (800215c <std+0x40>)
 8002148:	62e3      	str	r3, [r4, #44]	; 0x2c
 800214a:	4b05      	ldr	r3, [pc, #20]	; (8002160 <std+0x44>)
 800214c:	6224      	str	r4, [r4, #32]
 800214e:	6323      	str	r3, [r4, #48]	; 0x30
 8002150:	bd10      	pop	{r4, pc}
 8002152:	bf00      	nop
 8002154:	0800227d 	.word	0x0800227d
 8002158:	0800229f 	.word	0x0800229f
 800215c:	080022d7 	.word	0x080022d7
 8002160:	080022fb 	.word	0x080022fb

08002164 <stdio_exit_handler>:
 8002164:	4a02      	ldr	r2, [pc, #8]	; (8002170 <stdio_exit_handler+0xc>)
 8002166:	4903      	ldr	r1, [pc, #12]	; (8002174 <stdio_exit_handler+0x10>)
 8002168:	4803      	ldr	r0, [pc, #12]	; (8002178 <stdio_exit_handler+0x14>)
 800216a:	f000 b869 	b.w	8002240 <_fwalk_sglue>
 800216e:	bf00      	nop
 8002170:	2000000c 	.word	0x2000000c
 8002174:	08002741 	.word	0x08002741
 8002178:	20000018 	.word	0x20000018

0800217c <cleanup_stdio>:
 800217c:	6841      	ldr	r1, [r0, #4]
 800217e:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <cleanup_stdio+0x34>)
 8002180:	4299      	cmp	r1, r3
 8002182:	b510      	push	{r4, lr}
 8002184:	4604      	mov	r4, r0
 8002186:	d001      	beq.n	800218c <cleanup_stdio+0x10>
 8002188:	f000 fada 	bl	8002740 <_fflush_r>
 800218c:	68a1      	ldr	r1, [r4, #8]
 800218e:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <cleanup_stdio+0x38>)
 8002190:	4299      	cmp	r1, r3
 8002192:	d002      	beq.n	800219a <cleanup_stdio+0x1e>
 8002194:	4620      	mov	r0, r4
 8002196:	f000 fad3 	bl	8002740 <_fflush_r>
 800219a:	68e1      	ldr	r1, [r4, #12]
 800219c:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <cleanup_stdio+0x3c>)
 800219e:	4299      	cmp	r1, r3
 80021a0:	d004      	beq.n	80021ac <cleanup_stdio+0x30>
 80021a2:	4620      	mov	r0, r4
 80021a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021a8:	f000 baca 	b.w	8002740 <_fflush_r>
 80021ac:	bd10      	pop	{r4, pc}
 80021ae:	bf00      	nop
 80021b0:	200000c0 	.word	0x200000c0
 80021b4:	20000128 	.word	0x20000128
 80021b8:	20000190 	.word	0x20000190

080021bc <global_stdio_init.part.0>:
 80021bc:	b510      	push	{r4, lr}
 80021be:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <global_stdio_init.part.0+0x30>)
 80021c0:	4c0b      	ldr	r4, [pc, #44]	; (80021f0 <global_stdio_init.part.0+0x34>)
 80021c2:	4a0c      	ldr	r2, [pc, #48]	; (80021f4 <global_stdio_init.part.0+0x38>)
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	4620      	mov	r0, r4
 80021c8:	2200      	movs	r2, #0
 80021ca:	2104      	movs	r1, #4
 80021cc:	f7ff ffa6 	bl	800211c <std>
 80021d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80021d4:	2201      	movs	r2, #1
 80021d6:	2109      	movs	r1, #9
 80021d8:	f7ff ffa0 	bl	800211c <std>
 80021dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80021e0:	2202      	movs	r2, #2
 80021e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021e6:	2112      	movs	r1, #18
 80021e8:	f7ff bf98 	b.w	800211c <std>
 80021ec:	200001f8 	.word	0x200001f8
 80021f0:	200000c0 	.word	0x200000c0
 80021f4:	08002165 	.word	0x08002165

080021f8 <__sfp_lock_acquire>:
 80021f8:	4801      	ldr	r0, [pc, #4]	; (8002200 <__sfp_lock_acquire+0x8>)
 80021fa:	f000 b8fb 	b.w	80023f4 <__retarget_lock_acquire_recursive>
 80021fe:	bf00      	nop
 8002200:	20000201 	.word	0x20000201

08002204 <__sfp_lock_release>:
 8002204:	4801      	ldr	r0, [pc, #4]	; (800220c <__sfp_lock_release+0x8>)
 8002206:	f000 b8f6 	b.w	80023f6 <__retarget_lock_release_recursive>
 800220a:	bf00      	nop
 800220c:	20000201 	.word	0x20000201

08002210 <__sinit>:
 8002210:	b510      	push	{r4, lr}
 8002212:	4604      	mov	r4, r0
 8002214:	f7ff fff0 	bl	80021f8 <__sfp_lock_acquire>
 8002218:	6a23      	ldr	r3, [r4, #32]
 800221a:	b11b      	cbz	r3, 8002224 <__sinit+0x14>
 800221c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002220:	f7ff bff0 	b.w	8002204 <__sfp_lock_release>
 8002224:	4b04      	ldr	r3, [pc, #16]	; (8002238 <__sinit+0x28>)
 8002226:	6223      	str	r3, [r4, #32]
 8002228:	4b04      	ldr	r3, [pc, #16]	; (800223c <__sinit+0x2c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f5      	bne.n	800221c <__sinit+0xc>
 8002230:	f7ff ffc4 	bl	80021bc <global_stdio_init.part.0>
 8002234:	e7f2      	b.n	800221c <__sinit+0xc>
 8002236:	bf00      	nop
 8002238:	0800217d 	.word	0x0800217d
 800223c:	200001f8 	.word	0x200001f8

08002240 <_fwalk_sglue>:
 8002240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002244:	4607      	mov	r7, r0
 8002246:	4688      	mov	r8, r1
 8002248:	4614      	mov	r4, r2
 800224a:	2600      	movs	r6, #0
 800224c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002250:	f1b9 0901 	subs.w	r9, r9, #1
 8002254:	d505      	bpl.n	8002262 <_fwalk_sglue+0x22>
 8002256:	6824      	ldr	r4, [r4, #0]
 8002258:	2c00      	cmp	r4, #0
 800225a:	d1f7      	bne.n	800224c <_fwalk_sglue+0xc>
 800225c:	4630      	mov	r0, r6
 800225e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002262:	89ab      	ldrh	r3, [r5, #12]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d907      	bls.n	8002278 <_fwalk_sglue+0x38>
 8002268:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800226c:	3301      	adds	r3, #1
 800226e:	d003      	beq.n	8002278 <_fwalk_sglue+0x38>
 8002270:	4629      	mov	r1, r5
 8002272:	4638      	mov	r0, r7
 8002274:	47c0      	blx	r8
 8002276:	4306      	orrs	r6, r0
 8002278:	3568      	adds	r5, #104	; 0x68
 800227a:	e7e9      	b.n	8002250 <_fwalk_sglue+0x10>

0800227c <__sread>:
 800227c:	b510      	push	{r4, lr}
 800227e:	460c      	mov	r4, r1
 8002280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002284:	f000 f868 	bl	8002358 <_read_r>
 8002288:	2800      	cmp	r0, #0
 800228a:	bfab      	itete	ge
 800228c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800228e:	89a3      	ldrhlt	r3, [r4, #12]
 8002290:	181b      	addge	r3, r3, r0
 8002292:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002296:	bfac      	ite	ge
 8002298:	6563      	strge	r3, [r4, #84]	; 0x54
 800229a:	81a3      	strhlt	r3, [r4, #12]
 800229c:	bd10      	pop	{r4, pc}

0800229e <__swrite>:
 800229e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022a2:	461f      	mov	r7, r3
 80022a4:	898b      	ldrh	r3, [r1, #12]
 80022a6:	05db      	lsls	r3, r3, #23
 80022a8:	4605      	mov	r5, r0
 80022aa:	460c      	mov	r4, r1
 80022ac:	4616      	mov	r6, r2
 80022ae:	d505      	bpl.n	80022bc <__swrite+0x1e>
 80022b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022b4:	2302      	movs	r3, #2
 80022b6:	2200      	movs	r2, #0
 80022b8:	f000 f83c 	bl	8002334 <_lseek_r>
 80022bc:	89a3      	ldrh	r3, [r4, #12]
 80022be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022c6:	81a3      	strh	r3, [r4, #12]
 80022c8:	4632      	mov	r2, r6
 80022ca:	463b      	mov	r3, r7
 80022cc:	4628      	mov	r0, r5
 80022ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022d2:	f000 b853 	b.w	800237c <_write_r>

080022d6 <__sseek>:
 80022d6:	b510      	push	{r4, lr}
 80022d8:	460c      	mov	r4, r1
 80022da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022de:	f000 f829 	bl	8002334 <_lseek_r>
 80022e2:	1c43      	adds	r3, r0, #1
 80022e4:	89a3      	ldrh	r3, [r4, #12]
 80022e6:	bf15      	itete	ne
 80022e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80022ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80022ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80022f2:	81a3      	strheq	r3, [r4, #12]
 80022f4:	bf18      	it	ne
 80022f6:	81a3      	strhne	r3, [r4, #12]
 80022f8:	bd10      	pop	{r4, pc}

080022fa <__sclose>:
 80022fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022fe:	f000 b809 	b.w	8002314 <_close_r>

08002302 <memset>:
 8002302:	4402      	add	r2, r0
 8002304:	4603      	mov	r3, r0
 8002306:	4293      	cmp	r3, r2
 8002308:	d100      	bne.n	800230c <memset+0xa>
 800230a:	4770      	bx	lr
 800230c:	f803 1b01 	strb.w	r1, [r3], #1
 8002310:	e7f9      	b.n	8002306 <memset+0x4>
	...

08002314 <_close_r>:
 8002314:	b538      	push	{r3, r4, r5, lr}
 8002316:	4d06      	ldr	r5, [pc, #24]	; (8002330 <_close_r+0x1c>)
 8002318:	2300      	movs	r3, #0
 800231a:	4604      	mov	r4, r0
 800231c:	4608      	mov	r0, r1
 800231e:	602b      	str	r3, [r5, #0]
 8002320:	f7fe fca0 	bl	8000c64 <_close>
 8002324:	1c43      	adds	r3, r0, #1
 8002326:	d102      	bne.n	800232e <_close_r+0x1a>
 8002328:	682b      	ldr	r3, [r5, #0]
 800232a:	b103      	cbz	r3, 800232e <_close_r+0x1a>
 800232c:	6023      	str	r3, [r4, #0]
 800232e:	bd38      	pop	{r3, r4, r5, pc}
 8002330:	200001fc 	.word	0x200001fc

08002334 <_lseek_r>:
 8002334:	b538      	push	{r3, r4, r5, lr}
 8002336:	4d07      	ldr	r5, [pc, #28]	; (8002354 <_lseek_r+0x20>)
 8002338:	4604      	mov	r4, r0
 800233a:	4608      	mov	r0, r1
 800233c:	4611      	mov	r1, r2
 800233e:	2200      	movs	r2, #0
 8002340:	602a      	str	r2, [r5, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	f7fe fcb5 	bl	8000cb2 <_lseek>
 8002348:	1c43      	adds	r3, r0, #1
 800234a:	d102      	bne.n	8002352 <_lseek_r+0x1e>
 800234c:	682b      	ldr	r3, [r5, #0]
 800234e:	b103      	cbz	r3, 8002352 <_lseek_r+0x1e>
 8002350:	6023      	str	r3, [r4, #0]
 8002352:	bd38      	pop	{r3, r4, r5, pc}
 8002354:	200001fc 	.word	0x200001fc

08002358 <_read_r>:
 8002358:	b538      	push	{r3, r4, r5, lr}
 800235a:	4d07      	ldr	r5, [pc, #28]	; (8002378 <_read_r+0x20>)
 800235c:	4604      	mov	r4, r0
 800235e:	4608      	mov	r0, r1
 8002360:	4611      	mov	r1, r2
 8002362:	2200      	movs	r2, #0
 8002364:	602a      	str	r2, [r5, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	f7fe fc43 	bl	8000bf2 <_read>
 800236c:	1c43      	adds	r3, r0, #1
 800236e:	d102      	bne.n	8002376 <_read_r+0x1e>
 8002370:	682b      	ldr	r3, [r5, #0]
 8002372:	b103      	cbz	r3, 8002376 <_read_r+0x1e>
 8002374:	6023      	str	r3, [r4, #0]
 8002376:	bd38      	pop	{r3, r4, r5, pc}
 8002378:	200001fc 	.word	0x200001fc

0800237c <_write_r>:
 800237c:	b538      	push	{r3, r4, r5, lr}
 800237e:	4d07      	ldr	r5, [pc, #28]	; (800239c <_write_r+0x20>)
 8002380:	4604      	mov	r4, r0
 8002382:	4608      	mov	r0, r1
 8002384:	4611      	mov	r1, r2
 8002386:	2200      	movs	r2, #0
 8002388:	602a      	str	r2, [r5, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	f7fe fc4e 	bl	8000c2c <_write>
 8002390:	1c43      	adds	r3, r0, #1
 8002392:	d102      	bne.n	800239a <_write_r+0x1e>
 8002394:	682b      	ldr	r3, [r5, #0]
 8002396:	b103      	cbz	r3, 800239a <_write_r+0x1e>
 8002398:	6023      	str	r3, [r4, #0]
 800239a:	bd38      	pop	{r3, r4, r5, pc}
 800239c:	200001fc 	.word	0x200001fc

080023a0 <__errno>:
 80023a0:	4b01      	ldr	r3, [pc, #4]	; (80023a8 <__errno+0x8>)
 80023a2:	6818      	ldr	r0, [r3, #0]
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20000064 	.word	0x20000064

080023ac <__libc_init_array>:
 80023ac:	b570      	push	{r4, r5, r6, lr}
 80023ae:	4d0d      	ldr	r5, [pc, #52]	; (80023e4 <__libc_init_array+0x38>)
 80023b0:	4c0d      	ldr	r4, [pc, #52]	; (80023e8 <__libc_init_array+0x3c>)
 80023b2:	1b64      	subs	r4, r4, r5
 80023b4:	10a4      	asrs	r4, r4, #2
 80023b6:	2600      	movs	r6, #0
 80023b8:	42a6      	cmp	r6, r4
 80023ba:	d109      	bne.n	80023d0 <__libc_init_array+0x24>
 80023bc:	4d0b      	ldr	r5, [pc, #44]	; (80023ec <__libc_init_array+0x40>)
 80023be:	4c0c      	ldr	r4, [pc, #48]	; (80023f0 <__libc_init_array+0x44>)
 80023c0:	f000 fe40 	bl	8003044 <_init>
 80023c4:	1b64      	subs	r4, r4, r5
 80023c6:	10a4      	asrs	r4, r4, #2
 80023c8:	2600      	movs	r6, #0
 80023ca:	42a6      	cmp	r6, r4
 80023cc:	d105      	bne.n	80023da <__libc_init_array+0x2e>
 80023ce:	bd70      	pop	{r4, r5, r6, pc}
 80023d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80023d4:	4798      	blx	r3
 80023d6:	3601      	adds	r6, #1
 80023d8:	e7ee      	b.n	80023b8 <__libc_init_array+0xc>
 80023da:	f855 3b04 	ldr.w	r3, [r5], #4
 80023de:	4798      	blx	r3
 80023e0:	3601      	adds	r6, #1
 80023e2:	e7f2      	b.n	80023ca <__libc_init_array+0x1e>
 80023e4:	08003154 	.word	0x08003154
 80023e8:	08003154 	.word	0x08003154
 80023ec:	08003154 	.word	0x08003154
 80023f0:	08003158 	.word	0x08003158

080023f4 <__retarget_lock_acquire_recursive>:
 80023f4:	4770      	bx	lr

080023f6 <__retarget_lock_release_recursive>:
 80023f6:	4770      	bx	lr

080023f8 <__assert_func>:
 80023f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80023fa:	4614      	mov	r4, r2
 80023fc:	461a      	mov	r2, r3
 80023fe:	4b09      	ldr	r3, [pc, #36]	; (8002424 <__assert_func+0x2c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4605      	mov	r5, r0
 8002404:	68d8      	ldr	r0, [r3, #12]
 8002406:	b14c      	cbz	r4, 800241c <__assert_func+0x24>
 8002408:	4b07      	ldr	r3, [pc, #28]	; (8002428 <__assert_func+0x30>)
 800240a:	9100      	str	r1, [sp, #0]
 800240c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002410:	4906      	ldr	r1, [pc, #24]	; (800242c <__assert_func+0x34>)
 8002412:	462b      	mov	r3, r5
 8002414:	f000 f9bc 	bl	8002790 <fiprintf>
 8002418:	f000 f9dc 	bl	80027d4 <abort>
 800241c:	4b04      	ldr	r3, [pc, #16]	; (8002430 <__assert_func+0x38>)
 800241e:	461c      	mov	r4, r3
 8002420:	e7f3      	b.n	800240a <__assert_func+0x12>
 8002422:	bf00      	nop
 8002424:	20000064 	.word	0x20000064
 8002428:	080030db 	.word	0x080030db
 800242c:	080030e8 	.word	0x080030e8
 8002430:	08003116 	.word	0x08003116

08002434 <_free_r>:
 8002434:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002436:	2900      	cmp	r1, #0
 8002438:	d044      	beq.n	80024c4 <_free_r+0x90>
 800243a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800243e:	9001      	str	r0, [sp, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	f1a1 0404 	sub.w	r4, r1, #4
 8002446:	bfb8      	it	lt
 8002448:	18e4      	addlt	r4, r4, r3
 800244a:	f000 f8e7 	bl	800261c <__malloc_lock>
 800244e:	4a1e      	ldr	r2, [pc, #120]	; (80024c8 <_free_r+0x94>)
 8002450:	9801      	ldr	r0, [sp, #4]
 8002452:	6813      	ldr	r3, [r2, #0]
 8002454:	b933      	cbnz	r3, 8002464 <_free_r+0x30>
 8002456:	6063      	str	r3, [r4, #4]
 8002458:	6014      	str	r4, [r2, #0]
 800245a:	b003      	add	sp, #12
 800245c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002460:	f000 b8e2 	b.w	8002628 <__malloc_unlock>
 8002464:	42a3      	cmp	r3, r4
 8002466:	d908      	bls.n	800247a <_free_r+0x46>
 8002468:	6825      	ldr	r5, [r4, #0]
 800246a:	1961      	adds	r1, r4, r5
 800246c:	428b      	cmp	r3, r1
 800246e:	bf01      	itttt	eq
 8002470:	6819      	ldreq	r1, [r3, #0]
 8002472:	685b      	ldreq	r3, [r3, #4]
 8002474:	1949      	addeq	r1, r1, r5
 8002476:	6021      	streq	r1, [r4, #0]
 8002478:	e7ed      	b.n	8002456 <_free_r+0x22>
 800247a:	461a      	mov	r2, r3
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	b10b      	cbz	r3, 8002484 <_free_r+0x50>
 8002480:	42a3      	cmp	r3, r4
 8002482:	d9fa      	bls.n	800247a <_free_r+0x46>
 8002484:	6811      	ldr	r1, [r2, #0]
 8002486:	1855      	adds	r5, r2, r1
 8002488:	42a5      	cmp	r5, r4
 800248a:	d10b      	bne.n	80024a4 <_free_r+0x70>
 800248c:	6824      	ldr	r4, [r4, #0]
 800248e:	4421      	add	r1, r4
 8002490:	1854      	adds	r4, r2, r1
 8002492:	42a3      	cmp	r3, r4
 8002494:	6011      	str	r1, [r2, #0]
 8002496:	d1e0      	bne.n	800245a <_free_r+0x26>
 8002498:	681c      	ldr	r4, [r3, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	6053      	str	r3, [r2, #4]
 800249e:	440c      	add	r4, r1
 80024a0:	6014      	str	r4, [r2, #0]
 80024a2:	e7da      	b.n	800245a <_free_r+0x26>
 80024a4:	d902      	bls.n	80024ac <_free_r+0x78>
 80024a6:	230c      	movs	r3, #12
 80024a8:	6003      	str	r3, [r0, #0]
 80024aa:	e7d6      	b.n	800245a <_free_r+0x26>
 80024ac:	6825      	ldr	r5, [r4, #0]
 80024ae:	1961      	adds	r1, r4, r5
 80024b0:	428b      	cmp	r3, r1
 80024b2:	bf04      	itt	eq
 80024b4:	6819      	ldreq	r1, [r3, #0]
 80024b6:	685b      	ldreq	r3, [r3, #4]
 80024b8:	6063      	str	r3, [r4, #4]
 80024ba:	bf04      	itt	eq
 80024bc:	1949      	addeq	r1, r1, r5
 80024be:	6021      	streq	r1, [r4, #0]
 80024c0:	6054      	str	r4, [r2, #4]
 80024c2:	e7ca      	b.n	800245a <_free_r+0x26>
 80024c4:	b003      	add	sp, #12
 80024c6:	bd30      	pop	{r4, r5, pc}
 80024c8:	20000204 	.word	0x20000204

080024cc <malloc>:
 80024cc:	4b02      	ldr	r3, [pc, #8]	; (80024d8 <malloc+0xc>)
 80024ce:	4601      	mov	r1, r0
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	f000 b823 	b.w	800251c <_malloc_r>
 80024d6:	bf00      	nop
 80024d8:	20000064 	.word	0x20000064

080024dc <sbrk_aligned>:
 80024dc:	b570      	push	{r4, r5, r6, lr}
 80024de:	4e0e      	ldr	r6, [pc, #56]	; (8002518 <sbrk_aligned+0x3c>)
 80024e0:	460c      	mov	r4, r1
 80024e2:	6831      	ldr	r1, [r6, #0]
 80024e4:	4605      	mov	r5, r0
 80024e6:	b911      	cbnz	r1, 80024ee <sbrk_aligned+0x12>
 80024e8:	f000 f964 	bl	80027b4 <_sbrk_r>
 80024ec:	6030      	str	r0, [r6, #0]
 80024ee:	4621      	mov	r1, r4
 80024f0:	4628      	mov	r0, r5
 80024f2:	f000 f95f 	bl	80027b4 <_sbrk_r>
 80024f6:	1c43      	adds	r3, r0, #1
 80024f8:	d00a      	beq.n	8002510 <sbrk_aligned+0x34>
 80024fa:	1cc4      	adds	r4, r0, #3
 80024fc:	f024 0403 	bic.w	r4, r4, #3
 8002500:	42a0      	cmp	r0, r4
 8002502:	d007      	beq.n	8002514 <sbrk_aligned+0x38>
 8002504:	1a21      	subs	r1, r4, r0
 8002506:	4628      	mov	r0, r5
 8002508:	f000 f954 	bl	80027b4 <_sbrk_r>
 800250c:	3001      	adds	r0, #1
 800250e:	d101      	bne.n	8002514 <sbrk_aligned+0x38>
 8002510:	f04f 34ff 	mov.w	r4, #4294967295
 8002514:	4620      	mov	r0, r4
 8002516:	bd70      	pop	{r4, r5, r6, pc}
 8002518:	20000208 	.word	0x20000208

0800251c <_malloc_r>:
 800251c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002520:	1ccd      	adds	r5, r1, #3
 8002522:	f025 0503 	bic.w	r5, r5, #3
 8002526:	3508      	adds	r5, #8
 8002528:	2d0c      	cmp	r5, #12
 800252a:	bf38      	it	cc
 800252c:	250c      	movcc	r5, #12
 800252e:	2d00      	cmp	r5, #0
 8002530:	4607      	mov	r7, r0
 8002532:	db01      	blt.n	8002538 <_malloc_r+0x1c>
 8002534:	42a9      	cmp	r1, r5
 8002536:	d905      	bls.n	8002544 <_malloc_r+0x28>
 8002538:	230c      	movs	r3, #12
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	2600      	movs	r6, #0
 800253e:	4630      	mov	r0, r6
 8002540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002544:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002618 <_malloc_r+0xfc>
 8002548:	f000 f868 	bl	800261c <__malloc_lock>
 800254c:	f8d8 3000 	ldr.w	r3, [r8]
 8002550:	461c      	mov	r4, r3
 8002552:	bb5c      	cbnz	r4, 80025ac <_malloc_r+0x90>
 8002554:	4629      	mov	r1, r5
 8002556:	4638      	mov	r0, r7
 8002558:	f7ff ffc0 	bl	80024dc <sbrk_aligned>
 800255c:	1c43      	adds	r3, r0, #1
 800255e:	4604      	mov	r4, r0
 8002560:	d155      	bne.n	800260e <_malloc_r+0xf2>
 8002562:	f8d8 4000 	ldr.w	r4, [r8]
 8002566:	4626      	mov	r6, r4
 8002568:	2e00      	cmp	r6, #0
 800256a:	d145      	bne.n	80025f8 <_malloc_r+0xdc>
 800256c:	2c00      	cmp	r4, #0
 800256e:	d048      	beq.n	8002602 <_malloc_r+0xe6>
 8002570:	6823      	ldr	r3, [r4, #0]
 8002572:	4631      	mov	r1, r6
 8002574:	4638      	mov	r0, r7
 8002576:	eb04 0903 	add.w	r9, r4, r3
 800257a:	f000 f91b 	bl	80027b4 <_sbrk_r>
 800257e:	4581      	cmp	r9, r0
 8002580:	d13f      	bne.n	8002602 <_malloc_r+0xe6>
 8002582:	6821      	ldr	r1, [r4, #0]
 8002584:	1a6d      	subs	r5, r5, r1
 8002586:	4629      	mov	r1, r5
 8002588:	4638      	mov	r0, r7
 800258a:	f7ff ffa7 	bl	80024dc <sbrk_aligned>
 800258e:	3001      	adds	r0, #1
 8002590:	d037      	beq.n	8002602 <_malloc_r+0xe6>
 8002592:	6823      	ldr	r3, [r4, #0]
 8002594:	442b      	add	r3, r5
 8002596:	6023      	str	r3, [r4, #0]
 8002598:	f8d8 3000 	ldr.w	r3, [r8]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d038      	beq.n	8002612 <_malloc_r+0xf6>
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	42a2      	cmp	r2, r4
 80025a4:	d12b      	bne.n	80025fe <_malloc_r+0xe2>
 80025a6:	2200      	movs	r2, #0
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	e00f      	b.n	80025cc <_malloc_r+0xb0>
 80025ac:	6822      	ldr	r2, [r4, #0]
 80025ae:	1b52      	subs	r2, r2, r5
 80025b0:	d41f      	bmi.n	80025f2 <_malloc_r+0xd6>
 80025b2:	2a0b      	cmp	r2, #11
 80025b4:	d917      	bls.n	80025e6 <_malloc_r+0xca>
 80025b6:	1961      	adds	r1, r4, r5
 80025b8:	42a3      	cmp	r3, r4
 80025ba:	6025      	str	r5, [r4, #0]
 80025bc:	bf18      	it	ne
 80025be:	6059      	strne	r1, [r3, #4]
 80025c0:	6863      	ldr	r3, [r4, #4]
 80025c2:	bf08      	it	eq
 80025c4:	f8c8 1000 	streq.w	r1, [r8]
 80025c8:	5162      	str	r2, [r4, r5]
 80025ca:	604b      	str	r3, [r1, #4]
 80025cc:	4638      	mov	r0, r7
 80025ce:	f104 060b 	add.w	r6, r4, #11
 80025d2:	f000 f829 	bl	8002628 <__malloc_unlock>
 80025d6:	f026 0607 	bic.w	r6, r6, #7
 80025da:	1d23      	adds	r3, r4, #4
 80025dc:	1af2      	subs	r2, r6, r3
 80025de:	d0ae      	beq.n	800253e <_malloc_r+0x22>
 80025e0:	1b9b      	subs	r3, r3, r6
 80025e2:	50a3      	str	r3, [r4, r2]
 80025e4:	e7ab      	b.n	800253e <_malloc_r+0x22>
 80025e6:	42a3      	cmp	r3, r4
 80025e8:	6862      	ldr	r2, [r4, #4]
 80025ea:	d1dd      	bne.n	80025a8 <_malloc_r+0x8c>
 80025ec:	f8c8 2000 	str.w	r2, [r8]
 80025f0:	e7ec      	b.n	80025cc <_malloc_r+0xb0>
 80025f2:	4623      	mov	r3, r4
 80025f4:	6864      	ldr	r4, [r4, #4]
 80025f6:	e7ac      	b.n	8002552 <_malloc_r+0x36>
 80025f8:	4634      	mov	r4, r6
 80025fa:	6876      	ldr	r6, [r6, #4]
 80025fc:	e7b4      	b.n	8002568 <_malloc_r+0x4c>
 80025fe:	4613      	mov	r3, r2
 8002600:	e7cc      	b.n	800259c <_malloc_r+0x80>
 8002602:	230c      	movs	r3, #12
 8002604:	603b      	str	r3, [r7, #0]
 8002606:	4638      	mov	r0, r7
 8002608:	f000 f80e 	bl	8002628 <__malloc_unlock>
 800260c:	e797      	b.n	800253e <_malloc_r+0x22>
 800260e:	6025      	str	r5, [r4, #0]
 8002610:	e7dc      	b.n	80025cc <_malloc_r+0xb0>
 8002612:	605b      	str	r3, [r3, #4]
 8002614:	deff      	udf	#255	; 0xff
 8002616:	bf00      	nop
 8002618:	20000204 	.word	0x20000204

0800261c <__malloc_lock>:
 800261c:	4801      	ldr	r0, [pc, #4]	; (8002624 <__malloc_lock+0x8>)
 800261e:	f7ff bee9 	b.w	80023f4 <__retarget_lock_acquire_recursive>
 8002622:	bf00      	nop
 8002624:	20000200 	.word	0x20000200

08002628 <__malloc_unlock>:
 8002628:	4801      	ldr	r0, [pc, #4]	; (8002630 <__malloc_unlock+0x8>)
 800262a:	f7ff bee4 	b.w	80023f6 <__retarget_lock_release_recursive>
 800262e:	bf00      	nop
 8002630:	20000200 	.word	0x20000200

08002634 <__sflush_r>:
 8002634:	898a      	ldrh	r2, [r1, #12]
 8002636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800263a:	4605      	mov	r5, r0
 800263c:	0710      	lsls	r0, r2, #28
 800263e:	460c      	mov	r4, r1
 8002640:	d458      	bmi.n	80026f4 <__sflush_r+0xc0>
 8002642:	684b      	ldr	r3, [r1, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	dc05      	bgt.n	8002654 <__sflush_r+0x20>
 8002648:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800264a:	2b00      	cmp	r3, #0
 800264c:	dc02      	bgt.n	8002654 <__sflush_r+0x20>
 800264e:	2000      	movs	r0, #0
 8002650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002654:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002656:	2e00      	cmp	r6, #0
 8002658:	d0f9      	beq.n	800264e <__sflush_r+0x1a>
 800265a:	2300      	movs	r3, #0
 800265c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002660:	682f      	ldr	r7, [r5, #0]
 8002662:	6a21      	ldr	r1, [r4, #32]
 8002664:	602b      	str	r3, [r5, #0]
 8002666:	d032      	beq.n	80026ce <__sflush_r+0x9a>
 8002668:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800266a:	89a3      	ldrh	r3, [r4, #12]
 800266c:	075a      	lsls	r2, r3, #29
 800266e:	d505      	bpl.n	800267c <__sflush_r+0x48>
 8002670:	6863      	ldr	r3, [r4, #4]
 8002672:	1ac0      	subs	r0, r0, r3
 8002674:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002676:	b10b      	cbz	r3, 800267c <__sflush_r+0x48>
 8002678:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800267a:	1ac0      	subs	r0, r0, r3
 800267c:	2300      	movs	r3, #0
 800267e:	4602      	mov	r2, r0
 8002680:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002682:	6a21      	ldr	r1, [r4, #32]
 8002684:	4628      	mov	r0, r5
 8002686:	47b0      	blx	r6
 8002688:	1c43      	adds	r3, r0, #1
 800268a:	89a3      	ldrh	r3, [r4, #12]
 800268c:	d106      	bne.n	800269c <__sflush_r+0x68>
 800268e:	6829      	ldr	r1, [r5, #0]
 8002690:	291d      	cmp	r1, #29
 8002692:	d82b      	bhi.n	80026ec <__sflush_r+0xb8>
 8002694:	4a29      	ldr	r2, [pc, #164]	; (800273c <__sflush_r+0x108>)
 8002696:	410a      	asrs	r2, r1
 8002698:	07d6      	lsls	r6, r2, #31
 800269a:	d427      	bmi.n	80026ec <__sflush_r+0xb8>
 800269c:	2200      	movs	r2, #0
 800269e:	6062      	str	r2, [r4, #4]
 80026a0:	04d9      	lsls	r1, r3, #19
 80026a2:	6922      	ldr	r2, [r4, #16]
 80026a4:	6022      	str	r2, [r4, #0]
 80026a6:	d504      	bpl.n	80026b2 <__sflush_r+0x7e>
 80026a8:	1c42      	adds	r2, r0, #1
 80026aa:	d101      	bne.n	80026b0 <__sflush_r+0x7c>
 80026ac:	682b      	ldr	r3, [r5, #0]
 80026ae:	b903      	cbnz	r3, 80026b2 <__sflush_r+0x7e>
 80026b0:	6560      	str	r0, [r4, #84]	; 0x54
 80026b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80026b4:	602f      	str	r7, [r5, #0]
 80026b6:	2900      	cmp	r1, #0
 80026b8:	d0c9      	beq.n	800264e <__sflush_r+0x1a>
 80026ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80026be:	4299      	cmp	r1, r3
 80026c0:	d002      	beq.n	80026c8 <__sflush_r+0x94>
 80026c2:	4628      	mov	r0, r5
 80026c4:	f7ff feb6 	bl	8002434 <_free_r>
 80026c8:	2000      	movs	r0, #0
 80026ca:	6360      	str	r0, [r4, #52]	; 0x34
 80026cc:	e7c0      	b.n	8002650 <__sflush_r+0x1c>
 80026ce:	2301      	movs	r3, #1
 80026d0:	4628      	mov	r0, r5
 80026d2:	47b0      	blx	r6
 80026d4:	1c41      	adds	r1, r0, #1
 80026d6:	d1c8      	bne.n	800266a <__sflush_r+0x36>
 80026d8:	682b      	ldr	r3, [r5, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0c5      	beq.n	800266a <__sflush_r+0x36>
 80026de:	2b1d      	cmp	r3, #29
 80026e0:	d001      	beq.n	80026e6 <__sflush_r+0xb2>
 80026e2:	2b16      	cmp	r3, #22
 80026e4:	d101      	bne.n	80026ea <__sflush_r+0xb6>
 80026e6:	602f      	str	r7, [r5, #0]
 80026e8:	e7b1      	b.n	800264e <__sflush_r+0x1a>
 80026ea:	89a3      	ldrh	r3, [r4, #12]
 80026ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026f0:	81a3      	strh	r3, [r4, #12]
 80026f2:	e7ad      	b.n	8002650 <__sflush_r+0x1c>
 80026f4:	690f      	ldr	r7, [r1, #16]
 80026f6:	2f00      	cmp	r7, #0
 80026f8:	d0a9      	beq.n	800264e <__sflush_r+0x1a>
 80026fa:	0793      	lsls	r3, r2, #30
 80026fc:	680e      	ldr	r6, [r1, #0]
 80026fe:	bf08      	it	eq
 8002700:	694b      	ldreq	r3, [r1, #20]
 8002702:	600f      	str	r7, [r1, #0]
 8002704:	bf18      	it	ne
 8002706:	2300      	movne	r3, #0
 8002708:	eba6 0807 	sub.w	r8, r6, r7
 800270c:	608b      	str	r3, [r1, #8]
 800270e:	f1b8 0f00 	cmp.w	r8, #0
 8002712:	dd9c      	ble.n	800264e <__sflush_r+0x1a>
 8002714:	6a21      	ldr	r1, [r4, #32]
 8002716:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002718:	4643      	mov	r3, r8
 800271a:	463a      	mov	r2, r7
 800271c:	4628      	mov	r0, r5
 800271e:	47b0      	blx	r6
 8002720:	2800      	cmp	r0, #0
 8002722:	dc06      	bgt.n	8002732 <__sflush_r+0xfe>
 8002724:	89a3      	ldrh	r3, [r4, #12]
 8002726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800272a:	81a3      	strh	r3, [r4, #12]
 800272c:	f04f 30ff 	mov.w	r0, #4294967295
 8002730:	e78e      	b.n	8002650 <__sflush_r+0x1c>
 8002732:	4407      	add	r7, r0
 8002734:	eba8 0800 	sub.w	r8, r8, r0
 8002738:	e7e9      	b.n	800270e <__sflush_r+0xda>
 800273a:	bf00      	nop
 800273c:	dfbffffe 	.word	0xdfbffffe

08002740 <_fflush_r>:
 8002740:	b538      	push	{r3, r4, r5, lr}
 8002742:	690b      	ldr	r3, [r1, #16]
 8002744:	4605      	mov	r5, r0
 8002746:	460c      	mov	r4, r1
 8002748:	b913      	cbnz	r3, 8002750 <_fflush_r+0x10>
 800274a:	2500      	movs	r5, #0
 800274c:	4628      	mov	r0, r5
 800274e:	bd38      	pop	{r3, r4, r5, pc}
 8002750:	b118      	cbz	r0, 800275a <_fflush_r+0x1a>
 8002752:	6a03      	ldr	r3, [r0, #32]
 8002754:	b90b      	cbnz	r3, 800275a <_fflush_r+0x1a>
 8002756:	f7ff fd5b 	bl	8002210 <__sinit>
 800275a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0f3      	beq.n	800274a <_fflush_r+0xa>
 8002762:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002764:	07d0      	lsls	r0, r2, #31
 8002766:	d404      	bmi.n	8002772 <_fflush_r+0x32>
 8002768:	0599      	lsls	r1, r3, #22
 800276a:	d402      	bmi.n	8002772 <_fflush_r+0x32>
 800276c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800276e:	f7ff fe41 	bl	80023f4 <__retarget_lock_acquire_recursive>
 8002772:	4628      	mov	r0, r5
 8002774:	4621      	mov	r1, r4
 8002776:	f7ff ff5d 	bl	8002634 <__sflush_r>
 800277a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800277c:	07da      	lsls	r2, r3, #31
 800277e:	4605      	mov	r5, r0
 8002780:	d4e4      	bmi.n	800274c <_fflush_r+0xc>
 8002782:	89a3      	ldrh	r3, [r4, #12]
 8002784:	059b      	lsls	r3, r3, #22
 8002786:	d4e1      	bmi.n	800274c <_fflush_r+0xc>
 8002788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800278a:	f7ff fe34 	bl	80023f6 <__retarget_lock_release_recursive>
 800278e:	e7dd      	b.n	800274c <_fflush_r+0xc>

08002790 <fiprintf>:
 8002790:	b40e      	push	{r1, r2, r3}
 8002792:	b503      	push	{r0, r1, lr}
 8002794:	4601      	mov	r1, r0
 8002796:	ab03      	add	r3, sp, #12
 8002798:	4805      	ldr	r0, [pc, #20]	; (80027b0 <fiprintf+0x20>)
 800279a:	f853 2b04 	ldr.w	r2, [r3], #4
 800279e:	6800      	ldr	r0, [r0, #0]
 80027a0:	9301      	str	r3, [sp, #4]
 80027a2:	f000 f847 	bl	8002834 <_vfiprintf_r>
 80027a6:	b002      	add	sp, #8
 80027a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80027ac:	b003      	add	sp, #12
 80027ae:	4770      	bx	lr
 80027b0:	20000064 	.word	0x20000064

080027b4 <_sbrk_r>:
 80027b4:	b538      	push	{r3, r4, r5, lr}
 80027b6:	4d06      	ldr	r5, [pc, #24]	; (80027d0 <_sbrk_r+0x1c>)
 80027b8:	2300      	movs	r3, #0
 80027ba:	4604      	mov	r4, r0
 80027bc:	4608      	mov	r0, r1
 80027be:	602b      	str	r3, [r5, #0]
 80027c0:	f7fe fa84 	bl	8000ccc <_sbrk>
 80027c4:	1c43      	adds	r3, r0, #1
 80027c6:	d102      	bne.n	80027ce <_sbrk_r+0x1a>
 80027c8:	682b      	ldr	r3, [r5, #0]
 80027ca:	b103      	cbz	r3, 80027ce <_sbrk_r+0x1a>
 80027cc:	6023      	str	r3, [r4, #0]
 80027ce:	bd38      	pop	{r3, r4, r5, pc}
 80027d0:	200001fc 	.word	0x200001fc

080027d4 <abort>:
 80027d4:	b508      	push	{r3, lr}
 80027d6:	2006      	movs	r0, #6
 80027d8:	f000 fb94 	bl	8002f04 <raise>
 80027dc:	2001      	movs	r0, #1
 80027de:	f7fe f9fe 	bl	8000bde <_exit>

080027e2 <__sfputc_r>:
 80027e2:	6893      	ldr	r3, [r2, #8]
 80027e4:	3b01      	subs	r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	b410      	push	{r4}
 80027ea:	6093      	str	r3, [r2, #8]
 80027ec:	da08      	bge.n	8002800 <__sfputc_r+0x1e>
 80027ee:	6994      	ldr	r4, [r2, #24]
 80027f0:	42a3      	cmp	r3, r4
 80027f2:	db01      	blt.n	80027f8 <__sfputc_r+0x16>
 80027f4:	290a      	cmp	r1, #10
 80027f6:	d103      	bne.n	8002800 <__sfputc_r+0x1e>
 80027f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80027fc:	f000 bac4 	b.w	8002d88 <__swbuf_r>
 8002800:	6813      	ldr	r3, [r2, #0]
 8002802:	1c58      	adds	r0, r3, #1
 8002804:	6010      	str	r0, [r2, #0]
 8002806:	7019      	strb	r1, [r3, #0]
 8002808:	4608      	mov	r0, r1
 800280a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800280e:	4770      	bx	lr

08002810 <__sfputs_r>:
 8002810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002812:	4606      	mov	r6, r0
 8002814:	460f      	mov	r7, r1
 8002816:	4614      	mov	r4, r2
 8002818:	18d5      	adds	r5, r2, r3
 800281a:	42ac      	cmp	r4, r5
 800281c:	d101      	bne.n	8002822 <__sfputs_r+0x12>
 800281e:	2000      	movs	r0, #0
 8002820:	e007      	b.n	8002832 <__sfputs_r+0x22>
 8002822:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002826:	463a      	mov	r2, r7
 8002828:	4630      	mov	r0, r6
 800282a:	f7ff ffda 	bl	80027e2 <__sfputc_r>
 800282e:	1c43      	adds	r3, r0, #1
 8002830:	d1f3      	bne.n	800281a <__sfputs_r+0xa>
 8002832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002834 <_vfiprintf_r>:
 8002834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002838:	460d      	mov	r5, r1
 800283a:	b09d      	sub	sp, #116	; 0x74
 800283c:	4614      	mov	r4, r2
 800283e:	4698      	mov	r8, r3
 8002840:	4606      	mov	r6, r0
 8002842:	b118      	cbz	r0, 800284c <_vfiprintf_r+0x18>
 8002844:	6a03      	ldr	r3, [r0, #32]
 8002846:	b90b      	cbnz	r3, 800284c <_vfiprintf_r+0x18>
 8002848:	f7ff fce2 	bl	8002210 <__sinit>
 800284c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800284e:	07d9      	lsls	r1, r3, #31
 8002850:	d405      	bmi.n	800285e <_vfiprintf_r+0x2a>
 8002852:	89ab      	ldrh	r3, [r5, #12]
 8002854:	059a      	lsls	r2, r3, #22
 8002856:	d402      	bmi.n	800285e <_vfiprintf_r+0x2a>
 8002858:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800285a:	f7ff fdcb 	bl	80023f4 <__retarget_lock_acquire_recursive>
 800285e:	89ab      	ldrh	r3, [r5, #12]
 8002860:	071b      	lsls	r3, r3, #28
 8002862:	d501      	bpl.n	8002868 <_vfiprintf_r+0x34>
 8002864:	692b      	ldr	r3, [r5, #16]
 8002866:	b99b      	cbnz	r3, 8002890 <_vfiprintf_r+0x5c>
 8002868:	4629      	mov	r1, r5
 800286a:	4630      	mov	r0, r6
 800286c:	f000 faca 	bl	8002e04 <__swsetup_r>
 8002870:	b170      	cbz	r0, 8002890 <_vfiprintf_r+0x5c>
 8002872:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002874:	07dc      	lsls	r4, r3, #31
 8002876:	d504      	bpl.n	8002882 <_vfiprintf_r+0x4e>
 8002878:	f04f 30ff 	mov.w	r0, #4294967295
 800287c:	b01d      	add	sp, #116	; 0x74
 800287e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002882:	89ab      	ldrh	r3, [r5, #12]
 8002884:	0598      	lsls	r0, r3, #22
 8002886:	d4f7      	bmi.n	8002878 <_vfiprintf_r+0x44>
 8002888:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800288a:	f7ff fdb4 	bl	80023f6 <__retarget_lock_release_recursive>
 800288e:	e7f3      	b.n	8002878 <_vfiprintf_r+0x44>
 8002890:	2300      	movs	r3, #0
 8002892:	9309      	str	r3, [sp, #36]	; 0x24
 8002894:	2320      	movs	r3, #32
 8002896:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800289a:	f8cd 800c 	str.w	r8, [sp, #12]
 800289e:	2330      	movs	r3, #48	; 0x30
 80028a0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002a54 <_vfiprintf_r+0x220>
 80028a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80028a8:	f04f 0901 	mov.w	r9, #1
 80028ac:	4623      	mov	r3, r4
 80028ae:	469a      	mov	sl, r3
 80028b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80028b4:	b10a      	cbz	r2, 80028ba <_vfiprintf_r+0x86>
 80028b6:	2a25      	cmp	r2, #37	; 0x25
 80028b8:	d1f9      	bne.n	80028ae <_vfiprintf_r+0x7a>
 80028ba:	ebba 0b04 	subs.w	fp, sl, r4
 80028be:	d00b      	beq.n	80028d8 <_vfiprintf_r+0xa4>
 80028c0:	465b      	mov	r3, fp
 80028c2:	4622      	mov	r2, r4
 80028c4:	4629      	mov	r1, r5
 80028c6:	4630      	mov	r0, r6
 80028c8:	f7ff ffa2 	bl	8002810 <__sfputs_r>
 80028cc:	3001      	adds	r0, #1
 80028ce:	f000 80a9 	beq.w	8002a24 <_vfiprintf_r+0x1f0>
 80028d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028d4:	445a      	add	r2, fp
 80028d6:	9209      	str	r2, [sp, #36]	; 0x24
 80028d8:	f89a 3000 	ldrb.w	r3, [sl]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 80a1 	beq.w	8002a24 <_vfiprintf_r+0x1f0>
 80028e2:	2300      	movs	r3, #0
 80028e4:	f04f 32ff 	mov.w	r2, #4294967295
 80028e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028ec:	f10a 0a01 	add.w	sl, sl, #1
 80028f0:	9304      	str	r3, [sp, #16]
 80028f2:	9307      	str	r3, [sp, #28]
 80028f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80028f8:	931a      	str	r3, [sp, #104]	; 0x68
 80028fa:	4654      	mov	r4, sl
 80028fc:	2205      	movs	r2, #5
 80028fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002902:	4854      	ldr	r0, [pc, #336]	; (8002a54 <_vfiprintf_r+0x220>)
 8002904:	f7fd fc74 	bl	80001f0 <memchr>
 8002908:	9a04      	ldr	r2, [sp, #16]
 800290a:	b9d8      	cbnz	r0, 8002944 <_vfiprintf_r+0x110>
 800290c:	06d1      	lsls	r1, r2, #27
 800290e:	bf44      	itt	mi
 8002910:	2320      	movmi	r3, #32
 8002912:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002916:	0713      	lsls	r3, r2, #28
 8002918:	bf44      	itt	mi
 800291a:	232b      	movmi	r3, #43	; 0x2b
 800291c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002920:	f89a 3000 	ldrb.w	r3, [sl]
 8002924:	2b2a      	cmp	r3, #42	; 0x2a
 8002926:	d015      	beq.n	8002954 <_vfiprintf_r+0x120>
 8002928:	9a07      	ldr	r2, [sp, #28]
 800292a:	4654      	mov	r4, sl
 800292c:	2000      	movs	r0, #0
 800292e:	f04f 0c0a 	mov.w	ip, #10
 8002932:	4621      	mov	r1, r4
 8002934:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002938:	3b30      	subs	r3, #48	; 0x30
 800293a:	2b09      	cmp	r3, #9
 800293c:	d94d      	bls.n	80029da <_vfiprintf_r+0x1a6>
 800293e:	b1b0      	cbz	r0, 800296e <_vfiprintf_r+0x13a>
 8002940:	9207      	str	r2, [sp, #28]
 8002942:	e014      	b.n	800296e <_vfiprintf_r+0x13a>
 8002944:	eba0 0308 	sub.w	r3, r0, r8
 8002948:	fa09 f303 	lsl.w	r3, r9, r3
 800294c:	4313      	orrs	r3, r2
 800294e:	9304      	str	r3, [sp, #16]
 8002950:	46a2      	mov	sl, r4
 8002952:	e7d2      	b.n	80028fa <_vfiprintf_r+0xc6>
 8002954:	9b03      	ldr	r3, [sp, #12]
 8002956:	1d19      	adds	r1, r3, #4
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	9103      	str	r1, [sp, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	bfbb      	ittet	lt
 8002960:	425b      	neglt	r3, r3
 8002962:	f042 0202 	orrlt.w	r2, r2, #2
 8002966:	9307      	strge	r3, [sp, #28]
 8002968:	9307      	strlt	r3, [sp, #28]
 800296a:	bfb8      	it	lt
 800296c:	9204      	strlt	r2, [sp, #16]
 800296e:	7823      	ldrb	r3, [r4, #0]
 8002970:	2b2e      	cmp	r3, #46	; 0x2e
 8002972:	d10c      	bne.n	800298e <_vfiprintf_r+0x15a>
 8002974:	7863      	ldrb	r3, [r4, #1]
 8002976:	2b2a      	cmp	r3, #42	; 0x2a
 8002978:	d134      	bne.n	80029e4 <_vfiprintf_r+0x1b0>
 800297a:	9b03      	ldr	r3, [sp, #12]
 800297c:	1d1a      	adds	r2, r3, #4
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	9203      	str	r2, [sp, #12]
 8002982:	2b00      	cmp	r3, #0
 8002984:	bfb8      	it	lt
 8002986:	f04f 33ff 	movlt.w	r3, #4294967295
 800298a:	3402      	adds	r4, #2
 800298c:	9305      	str	r3, [sp, #20]
 800298e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002a64 <_vfiprintf_r+0x230>
 8002992:	7821      	ldrb	r1, [r4, #0]
 8002994:	2203      	movs	r2, #3
 8002996:	4650      	mov	r0, sl
 8002998:	f7fd fc2a 	bl	80001f0 <memchr>
 800299c:	b138      	cbz	r0, 80029ae <_vfiprintf_r+0x17a>
 800299e:	9b04      	ldr	r3, [sp, #16]
 80029a0:	eba0 000a 	sub.w	r0, r0, sl
 80029a4:	2240      	movs	r2, #64	; 0x40
 80029a6:	4082      	lsls	r2, r0
 80029a8:	4313      	orrs	r3, r2
 80029aa:	3401      	adds	r4, #1
 80029ac:	9304      	str	r3, [sp, #16]
 80029ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029b2:	4829      	ldr	r0, [pc, #164]	; (8002a58 <_vfiprintf_r+0x224>)
 80029b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80029b8:	2206      	movs	r2, #6
 80029ba:	f7fd fc19 	bl	80001f0 <memchr>
 80029be:	2800      	cmp	r0, #0
 80029c0:	d03f      	beq.n	8002a42 <_vfiprintf_r+0x20e>
 80029c2:	4b26      	ldr	r3, [pc, #152]	; (8002a5c <_vfiprintf_r+0x228>)
 80029c4:	bb1b      	cbnz	r3, 8002a0e <_vfiprintf_r+0x1da>
 80029c6:	9b03      	ldr	r3, [sp, #12]
 80029c8:	3307      	adds	r3, #7
 80029ca:	f023 0307 	bic.w	r3, r3, #7
 80029ce:	3308      	adds	r3, #8
 80029d0:	9303      	str	r3, [sp, #12]
 80029d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029d4:	443b      	add	r3, r7
 80029d6:	9309      	str	r3, [sp, #36]	; 0x24
 80029d8:	e768      	b.n	80028ac <_vfiprintf_r+0x78>
 80029da:	fb0c 3202 	mla	r2, ip, r2, r3
 80029de:	460c      	mov	r4, r1
 80029e0:	2001      	movs	r0, #1
 80029e2:	e7a6      	b.n	8002932 <_vfiprintf_r+0xfe>
 80029e4:	2300      	movs	r3, #0
 80029e6:	3401      	adds	r4, #1
 80029e8:	9305      	str	r3, [sp, #20]
 80029ea:	4619      	mov	r1, r3
 80029ec:	f04f 0c0a 	mov.w	ip, #10
 80029f0:	4620      	mov	r0, r4
 80029f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029f6:	3a30      	subs	r2, #48	; 0x30
 80029f8:	2a09      	cmp	r2, #9
 80029fa:	d903      	bls.n	8002a04 <_vfiprintf_r+0x1d0>
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0c6      	beq.n	800298e <_vfiprintf_r+0x15a>
 8002a00:	9105      	str	r1, [sp, #20]
 8002a02:	e7c4      	b.n	800298e <_vfiprintf_r+0x15a>
 8002a04:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a08:	4604      	mov	r4, r0
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e7f0      	b.n	80029f0 <_vfiprintf_r+0x1bc>
 8002a0e:	ab03      	add	r3, sp, #12
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	462a      	mov	r2, r5
 8002a14:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <_vfiprintf_r+0x22c>)
 8002a16:	a904      	add	r1, sp, #16
 8002a18:	4630      	mov	r0, r6
 8002a1a:	f3af 8000 	nop.w
 8002a1e:	4607      	mov	r7, r0
 8002a20:	1c78      	adds	r0, r7, #1
 8002a22:	d1d6      	bne.n	80029d2 <_vfiprintf_r+0x19e>
 8002a24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a26:	07d9      	lsls	r1, r3, #31
 8002a28:	d405      	bmi.n	8002a36 <_vfiprintf_r+0x202>
 8002a2a:	89ab      	ldrh	r3, [r5, #12]
 8002a2c:	059a      	lsls	r2, r3, #22
 8002a2e:	d402      	bmi.n	8002a36 <_vfiprintf_r+0x202>
 8002a30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a32:	f7ff fce0 	bl	80023f6 <__retarget_lock_release_recursive>
 8002a36:	89ab      	ldrh	r3, [r5, #12]
 8002a38:	065b      	lsls	r3, r3, #25
 8002a3a:	f53f af1d 	bmi.w	8002878 <_vfiprintf_r+0x44>
 8002a3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a40:	e71c      	b.n	800287c <_vfiprintf_r+0x48>
 8002a42:	ab03      	add	r3, sp, #12
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	462a      	mov	r2, r5
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <_vfiprintf_r+0x22c>)
 8002a4a:	a904      	add	r1, sp, #16
 8002a4c:	4630      	mov	r0, r6
 8002a4e:	f000 f879 	bl	8002b44 <_printf_i>
 8002a52:	e7e4      	b.n	8002a1e <_vfiprintf_r+0x1ea>
 8002a54:	08003117 	.word	0x08003117
 8002a58:	08003121 	.word	0x08003121
 8002a5c:	00000000 	.word	0x00000000
 8002a60:	08002811 	.word	0x08002811
 8002a64:	0800311d 	.word	0x0800311d

08002a68 <_printf_common>:
 8002a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a6c:	4616      	mov	r6, r2
 8002a6e:	4699      	mov	r9, r3
 8002a70:	688a      	ldr	r2, [r1, #8]
 8002a72:	690b      	ldr	r3, [r1, #16]
 8002a74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	bfb8      	it	lt
 8002a7c:	4613      	movlt	r3, r2
 8002a7e:	6033      	str	r3, [r6, #0]
 8002a80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a84:	4607      	mov	r7, r0
 8002a86:	460c      	mov	r4, r1
 8002a88:	b10a      	cbz	r2, 8002a8e <_printf_common+0x26>
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	6033      	str	r3, [r6, #0]
 8002a8e:	6823      	ldr	r3, [r4, #0]
 8002a90:	0699      	lsls	r1, r3, #26
 8002a92:	bf42      	ittt	mi
 8002a94:	6833      	ldrmi	r3, [r6, #0]
 8002a96:	3302      	addmi	r3, #2
 8002a98:	6033      	strmi	r3, [r6, #0]
 8002a9a:	6825      	ldr	r5, [r4, #0]
 8002a9c:	f015 0506 	ands.w	r5, r5, #6
 8002aa0:	d106      	bne.n	8002ab0 <_printf_common+0x48>
 8002aa2:	f104 0a19 	add.w	sl, r4, #25
 8002aa6:	68e3      	ldr	r3, [r4, #12]
 8002aa8:	6832      	ldr	r2, [r6, #0]
 8002aaa:	1a9b      	subs	r3, r3, r2
 8002aac:	42ab      	cmp	r3, r5
 8002aae:	dc26      	bgt.n	8002afe <_printf_common+0x96>
 8002ab0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ab4:	1e13      	subs	r3, r2, #0
 8002ab6:	6822      	ldr	r2, [r4, #0]
 8002ab8:	bf18      	it	ne
 8002aba:	2301      	movne	r3, #1
 8002abc:	0692      	lsls	r2, r2, #26
 8002abe:	d42b      	bmi.n	8002b18 <_printf_common+0xb0>
 8002ac0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ac4:	4649      	mov	r1, r9
 8002ac6:	4638      	mov	r0, r7
 8002ac8:	47c0      	blx	r8
 8002aca:	3001      	adds	r0, #1
 8002acc:	d01e      	beq.n	8002b0c <_printf_common+0xa4>
 8002ace:	6823      	ldr	r3, [r4, #0]
 8002ad0:	6922      	ldr	r2, [r4, #16]
 8002ad2:	f003 0306 	and.w	r3, r3, #6
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	bf02      	ittt	eq
 8002ada:	68e5      	ldreq	r5, [r4, #12]
 8002adc:	6833      	ldreq	r3, [r6, #0]
 8002ade:	1aed      	subeq	r5, r5, r3
 8002ae0:	68a3      	ldr	r3, [r4, #8]
 8002ae2:	bf0c      	ite	eq
 8002ae4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ae8:	2500      	movne	r5, #0
 8002aea:	4293      	cmp	r3, r2
 8002aec:	bfc4      	itt	gt
 8002aee:	1a9b      	subgt	r3, r3, r2
 8002af0:	18ed      	addgt	r5, r5, r3
 8002af2:	2600      	movs	r6, #0
 8002af4:	341a      	adds	r4, #26
 8002af6:	42b5      	cmp	r5, r6
 8002af8:	d11a      	bne.n	8002b30 <_printf_common+0xc8>
 8002afa:	2000      	movs	r0, #0
 8002afc:	e008      	b.n	8002b10 <_printf_common+0xa8>
 8002afe:	2301      	movs	r3, #1
 8002b00:	4652      	mov	r2, sl
 8002b02:	4649      	mov	r1, r9
 8002b04:	4638      	mov	r0, r7
 8002b06:	47c0      	blx	r8
 8002b08:	3001      	adds	r0, #1
 8002b0a:	d103      	bne.n	8002b14 <_printf_common+0xac>
 8002b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b14:	3501      	adds	r5, #1
 8002b16:	e7c6      	b.n	8002aa6 <_printf_common+0x3e>
 8002b18:	18e1      	adds	r1, r4, r3
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	2030      	movs	r0, #48	; 0x30
 8002b1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b22:	4422      	add	r2, r4
 8002b24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b2c:	3302      	adds	r3, #2
 8002b2e:	e7c7      	b.n	8002ac0 <_printf_common+0x58>
 8002b30:	2301      	movs	r3, #1
 8002b32:	4622      	mov	r2, r4
 8002b34:	4649      	mov	r1, r9
 8002b36:	4638      	mov	r0, r7
 8002b38:	47c0      	blx	r8
 8002b3a:	3001      	adds	r0, #1
 8002b3c:	d0e6      	beq.n	8002b0c <_printf_common+0xa4>
 8002b3e:	3601      	adds	r6, #1
 8002b40:	e7d9      	b.n	8002af6 <_printf_common+0x8e>
	...

08002b44 <_printf_i>:
 8002b44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b48:	7e0f      	ldrb	r7, [r1, #24]
 8002b4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002b4c:	2f78      	cmp	r7, #120	; 0x78
 8002b4e:	4691      	mov	r9, r2
 8002b50:	4680      	mov	r8, r0
 8002b52:	460c      	mov	r4, r1
 8002b54:	469a      	mov	sl, r3
 8002b56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002b5a:	d807      	bhi.n	8002b6c <_printf_i+0x28>
 8002b5c:	2f62      	cmp	r7, #98	; 0x62
 8002b5e:	d80a      	bhi.n	8002b76 <_printf_i+0x32>
 8002b60:	2f00      	cmp	r7, #0
 8002b62:	f000 80d4 	beq.w	8002d0e <_printf_i+0x1ca>
 8002b66:	2f58      	cmp	r7, #88	; 0x58
 8002b68:	f000 80c0 	beq.w	8002cec <_printf_i+0x1a8>
 8002b6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b74:	e03a      	b.n	8002bec <_printf_i+0xa8>
 8002b76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b7a:	2b15      	cmp	r3, #21
 8002b7c:	d8f6      	bhi.n	8002b6c <_printf_i+0x28>
 8002b7e:	a101      	add	r1, pc, #4	; (adr r1, 8002b84 <_printf_i+0x40>)
 8002b80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b84:	08002bdd 	.word	0x08002bdd
 8002b88:	08002bf1 	.word	0x08002bf1
 8002b8c:	08002b6d 	.word	0x08002b6d
 8002b90:	08002b6d 	.word	0x08002b6d
 8002b94:	08002b6d 	.word	0x08002b6d
 8002b98:	08002b6d 	.word	0x08002b6d
 8002b9c:	08002bf1 	.word	0x08002bf1
 8002ba0:	08002b6d 	.word	0x08002b6d
 8002ba4:	08002b6d 	.word	0x08002b6d
 8002ba8:	08002b6d 	.word	0x08002b6d
 8002bac:	08002b6d 	.word	0x08002b6d
 8002bb0:	08002cf5 	.word	0x08002cf5
 8002bb4:	08002c1d 	.word	0x08002c1d
 8002bb8:	08002caf 	.word	0x08002caf
 8002bbc:	08002b6d 	.word	0x08002b6d
 8002bc0:	08002b6d 	.word	0x08002b6d
 8002bc4:	08002d17 	.word	0x08002d17
 8002bc8:	08002b6d 	.word	0x08002b6d
 8002bcc:	08002c1d 	.word	0x08002c1d
 8002bd0:	08002b6d 	.word	0x08002b6d
 8002bd4:	08002b6d 	.word	0x08002b6d
 8002bd8:	08002cb7 	.word	0x08002cb7
 8002bdc:	682b      	ldr	r3, [r5, #0]
 8002bde:	1d1a      	adds	r2, r3, #4
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	602a      	str	r2, [r5, #0]
 8002be4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002be8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bec:	2301      	movs	r3, #1
 8002bee:	e09f      	b.n	8002d30 <_printf_i+0x1ec>
 8002bf0:	6820      	ldr	r0, [r4, #0]
 8002bf2:	682b      	ldr	r3, [r5, #0]
 8002bf4:	0607      	lsls	r7, r0, #24
 8002bf6:	f103 0104 	add.w	r1, r3, #4
 8002bfa:	6029      	str	r1, [r5, #0]
 8002bfc:	d501      	bpl.n	8002c02 <_printf_i+0xbe>
 8002bfe:	681e      	ldr	r6, [r3, #0]
 8002c00:	e003      	b.n	8002c0a <_printf_i+0xc6>
 8002c02:	0646      	lsls	r6, r0, #25
 8002c04:	d5fb      	bpl.n	8002bfe <_printf_i+0xba>
 8002c06:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002c0a:	2e00      	cmp	r6, #0
 8002c0c:	da03      	bge.n	8002c16 <_printf_i+0xd2>
 8002c0e:	232d      	movs	r3, #45	; 0x2d
 8002c10:	4276      	negs	r6, r6
 8002c12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c16:	485a      	ldr	r0, [pc, #360]	; (8002d80 <_printf_i+0x23c>)
 8002c18:	230a      	movs	r3, #10
 8002c1a:	e012      	b.n	8002c42 <_printf_i+0xfe>
 8002c1c:	682b      	ldr	r3, [r5, #0]
 8002c1e:	6820      	ldr	r0, [r4, #0]
 8002c20:	1d19      	adds	r1, r3, #4
 8002c22:	6029      	str	r1, [r5, #0]
 8002c24:	0605      	lsls	r5, r0, #24
 8002c26:	d501      	bpl.n	8002c2c <_printf_i+0xe8>
 8002c28:	681e      	ldr	r6, [r3, #0]
 8002c2a:	e002      	b.n	8002c32 <_printf_i+0xee>
 8002c2c:	0641      	lsls	r1, r0, #25
 8002c2e:	d5fb      	bpl.n	8002c28 <_printf_i+0xe4>
 8002c30:	881e      	ldrh	r6, [r3, #0]
 8002c32:	4853      	ldr	r0, [pc, #332]	; (8002d80 <_printf_i+0x23c>)
 8002c34:	2f6f      	cmp	r7, #111	; 0x6f
 8002c36:	bf0c      	ite	eq
 8002c38:	2308      	moveq	r3, #8
 8002c3a:	230a      	movne	r3, #10
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c42:	6865      	ldr	r5, [r4, #4]
 8002c44:	60a5      	str	r5, [r4, #8]
 8002c46:	2d00      	cmp	r5, #0
 8002c48:	bfa2      	ittt	ge
 8002c4a:	6821      	ldrge	r1, [r4, #0]
 8002c4c:	f021 0104 	bicge.w	r1, r1, #4
 8002c50:	6021      	strge	r1, [r4, #0]
 8002c52:	b90e      	cbnz	r6, 8002c58 <_printf_i+0x114>
 8002c54:	2d00      	cmp	r5, #0
 8002c56:	d04b      	beq.n	8002cf0 <_printf_i+0x1ac>
 8002c58:	4615      	mov	r5, r2
 8002c5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8002c5e:	fb03 6711 	mls	r7, r3, r1, r6
 8002c62:	5dc7      	ldrb	r7, [r0, r7]
 8002c64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002c68:	4637      	mov	r7, r6
 8002c6a:	42bb      	cmp	r3, r7
 8002c6c:	460e      	mov	r6, r1
 8002c6e:	d9f4      	bls.n	8002c5a <_printf_i+0x116>
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d10b      	bne.n	8002c8c <_printf_i+0x148>
 8002c74:	6823      	ldr	r3, [r4, #0]
 8002c76:	07de      	lsls	r6, r3, #31
 8002c78:	d508      	bpl.n	8002c8c <_printf_i+0x148>
 8002c7a:	6923      	ldr	r3, [r4, #16]
 8002c7c:	6861      	ldr	r1, [r4, #4]
 8002c7e:	4299      	cmp	r1, r3
 8002c80:	bfde      	ittt	le
 8002c82:	2330      	movle	r3, #48	; 0x30
 8002c84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c8c:	1b52      	subs	r2, r2, r5
 8002c8e:	6122      	str	r2, [r4, #16]
 8002c90:	f8cd a000 	str.w	sl, [sp]
 8002c94:	464b      	mov	r3, r9
 8002c96:	aa03      	add	r2, sp, #12
 8002c98:	4621      	mov	r1, r4
 8002c9a:	4640      	mov	r0, r8
 8002c9c:	f7ff fee4 	bl	8002a68 <_printf_common>
 8002ca0:	3001      	adds	r0, #1
 8002ca2:	d14a      	bne.n	8002d3a <_printf_i+0x1f6>
 8002ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca8:	b004      	add	sp, #16
 8002caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cae:	6823      	ldr	r3, [r4, #0]
 8002cb0:	f043 0320 	orr.w	r3, r3, #32
 8002cb4:	6023      	str	r3, [r4, #0]
 8002cb6:	4833      	ldr	r0, [pc, #204]	; (8002d84 <_printf_i+0x240>)
 8002cb8:	2778      	movs	r7, #120	; 0x78
 8002cba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002cbe:	6823      	ldr	r3, [r4, #0]
 8002cc0:	6829      	ldr	r1, [r5, #0]
 8002cc2:	061f      	lsls	r7, r3, #24
 8002cc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8002cc8:	d402      	bmi.n	8002cd0 <_printf_i+0x18c>
 8002cca:	065f      	lsls	r7, r3, #25
 8002ccc:	bf48      	it	mi
 8002cce:	b2b6      	uxthmi	r6, r6
 8002cd0:	07df      	lsls	r7, r3, #31
 8002cd2:	bf48      	it	mi
 8002cd4:	f043 0320 	orrmi.w	r3, r3, #32
 8002cd8:	6029      	str	r1, [r5, #0]
 8002cda:	bf48      	it	mi
 8002cdc:	6023      	strmi	r3, [r4, #0]
 8002cde:	b91e      	cbnz	r6, 8002ce8 <_printf_i+0x1a4>
 8002ce0:	6823      	ldr	r3, [r4, #0]
 8002ce2:	f023 0320 	bic.w	r3, r3, #32
 8002ce6:	6023      	str	r3, [r4, #0]
 8002ce8:	2310      	movs	r3, #16
 8002cea:	e7a7      	b.n	8002c3c <_printf_i+0xf8>
 8002cec:	4824      	ldr	r0, [pc, #144]	; (8002d80 <_printf_i+0x23c>)
 8002cee:	e7e4      	b.n	8002cba <_printf_i+0x176>
 8002cf0:	4615      	mov	r5, r2
 8002cf2:	e7bd      	b.n	8002c70 <_printf_i+0x12c>
 8002cf4:	682b      	ldr	r3, [r5, #0]
 8002cf6:	6826      	ldr	r6, [r4, #0]
 8002cf8:	6961      	ldr	r1, [r4, #20]
 8002cfa:	1d18      	adds	r0, r3, #4
 8002cfc:	6028      	str	r0, [r5, #0]
 8002cfe:	0635      	lsls	r5, r6, #24
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	d501      	bpl.n	8002d08 <_printf_i+0x1c4>
 8002d04:	6019      	str	r1, [r3, #0]
 8002d06:	e002      	b.n	8002d0e <_printf_i+0x1ca>
 8002d08:	0670      	lsls	r0, r6, #25
 8002d0a:	d5fb      	bpl.n	8002d04 <_printf_i+0x1c0>
 8002d0c:	8019      	strh	r1, [r3, #0]
 8002d0e:	2300      	movs	r3, #0
 8002d10:	6123      	str	r3, [r4, #16]
 8002d12:	4615      	mov	r5, r2
 8002d14:	e7bc      	b.n	8002c90 <_printf_i+0x14c>
 8002d16:	682b      	ldr	r3, [r5, #0]
 8002d18:	1d1a      	adds	r2, r3, #4
 8002d1a:	602a      	str	r2, [r5, #0]
 8002d1c:	681d      	ldr	r5, [r3, #0]
 8002d1e:	6862      	ldr	r2, [r4, #4]
 8002d20:	2100      	movs	r1, #0
 8002d22:	4628      	mov	r0, r5
 8002d24:	f7fd fa64 	bl	80001f0 <memchr>
 8002d28:	b108      	cbz	r0, 8002d2e <_printf_i+0x1ea>
 8002d2a:	1b40      	subs	r0, r0, r5
 8002d2c:	6060      	str	r0, [r4, #4]
 8002d2e:	6863      	ldr	r3, [r4, #4]
 8002d30:	6123      	str	r3, [r4, #16]
 8002d32:	2300      	movs	r3, #0
 8002d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d38:	e7aa      	b.n	8002c90 <_printf_i+0x14c>
 8002d3a:	6923      	ldr	r3, [r4, #16]
 8002d3c:	462a      	mov	r2, r5
 8002d3e:	4649      	mov	r1, r9
 8002d40:	4640      	mov	r0, r8
 8002d42:	47d0      	blx	sl
 8002d44:	3001      	adds	r0, #1
 8002d46:	d0ad      	beq.n	8002ca4 <_printf_i+0x160>
 8002d48:	6823      	ldr	r3, [r4, #0]
 8002d4a:	079b      	lsls	r3, r3, #30
 8002d4c:	d413      	bmi.n	8002d76 <_printf_i+0x232>
 8002d4e:	68e0      	ldr	r0, [r4, #12]
 8002d50:	9b03      	ldr	r3, [sp, #12]
 8002d52:	4298      	cmp	r0, r3
 8002d54:	bfb8      	it	lt
 8002d56:	4618      	movlt	r0, r3
 8002d58:	e7a6      	b.n	8002ca8 <_printf_i+0x164>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	4632      	mov	r2, r6
 8002d5e:	4649      	mov	r1, r9
 8002d60:	4640      	mov	r0, r8
 8002d62:	47d0      	blx	sl
 8002d64:	3001      	adds	r0, #1
 8002d66:	d09d      	beq.n	8002ca4 <_printf_i+0x160>
 8002d68:	3501      	adds	r5, #1
 8002d6a:	68e3      	ldr	r3, [r4, #12]
 8002d6c:	9903      	ldr	r1, [sp, #12]
 8002d6e:	1a5b      	subs	r3, r3, r1
 8002d70:	42ab      	cmp	r3, r5
 8002d72:	dcf2      	bgt.n	8002d5a <_printf_i+0x216>
 8002d74:	e7eb      	b.n	8002d4e <_printf_i+0x20a>
 8002d76:	2500      	movs	r5, #0
 8002d78:	f104 0619 	add.w	r6, r4, #25
 8002d7c:	e7f5      	b.n	8002d6a <_printf_i+0x226>
 8002d7e:	bf00      	nop
 8002d80:	08003128 	.word	0x08003128
 8002d84:	08003139 	.word	0x08003139

08002d88 <__swbuf_r>:
 8002d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d8a:	460e      	mov	r6, r1
 8002d8c:	4614      	mov	r4, r2
 8002d8e:	4605      	mov	r5, r0
 8002d90:	b118      	cbz	r0, 8002d9a <__swbuf_r+0x12>
 8002d92:	6a03      	ldr	r3, [r0, #32]
 8002d94:	b90b      	cbnz	r3, 8002d9a <__swbuf_r+0x12>
 8002d96:	f7ff fa3b 	bl	8002210 <__sinit>
 8002d9a:	69a3      	ldr	r3, [r4, #24]
 8002d9c:	60a3      	str	r3, [r4, #8]
 8002d9e:	89a3      	ldrh	r3, [r4, #12]
 8002da0:	071a      	lsls	r2, r3, #28
 8002da2:	d525      	bpl.n	8002df0 <__swbuf_r+0x68>
 8002da4:	6923      	ldr	r3, [r4, #16]
 8002da6:	b31b      	cbz	r3, 8002df0 <__swbuf_r+0x68>
 8002da8:	6823      	ldr	r3, [r4, #0]
 8002daa:	6922      	ldr	r2, [r4, #16]
 8002dac:	1a98      	subs	r0, r3, r2
 8002dae:	6963      	ldr	r3, [r4, #20]
 8002db0:	b2f6      	uxtb	r6, r6
 8002db2:	4283      	cmp	r3, r0
 8002db4:	4637      	mov	r7, r6
 8002db6:	dc04      	bgt.n	8002dc2 <__swbuf_r+0x3a>
 8002db8:	4621      	mov	r1, r4
 8002dba:	4628      	mov	r0, r5
 8002dbc:	f7ff fcc0 	bl	8002740 <_fflush_r>
 8002dc0:	b9e0      	cbnz	r0, 8002dfc <__swbuf_r+0x74>
 8002dc2:	68a3      	ldr	r3, [r4, #8]
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	60a3      	str	r3, [r4, #8]
 8002dc8:	6823      	ldr	r3, [r4, #0]
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	6022      	str	r2, [r4, #0]
 8002dce:	701e      	strb	r6, [r3, #0]
 8002dd0:	6962      	ldr	r2, [r4, #20]
 8002dd2:	1c43      	adds	r3, r0, #1
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d004      	beq.n	8002de2 <__swbuf_r+0x5a>
 8002dd8:	89a3      	ldrh	r3, [r4, #12]
 8002dda:	07db      	lsls	r3, r3, #31
 8002ddc:	d506      	bpl.n	8002dec <__swbuf_r+0x64>
 8002dde:	2e0a      	cmp	r6, #10
 8002de0:	d104      	bne.n	8002dec <__swbuf_r+0x64>
 8002de2:	4621      	mov	r1, r4
 8002de4:	4628      	mov	r0, r5
 8002de6:	f7ff fcab 	bl	8002740 <_fflush_r>
 8002dea:	b938      	cbnz	r0, 8002dfc <__swbuf_r+0x74>
 8002dec:	4638      	mov	r0, r7
 8002dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002df0:	4621      	mov	r1, r4
 8002df2:	4628      	mov	r0, r5
 8002df4:	f000 f806 	bl	8002e04 <__swsetup_r>
 8002df8:	2800      	cmp	r0, #0
 8002dfa:	d0d5      	beq.n	8002da8 <__swbuf_r+0x20>
 8002dfc:	f04f 37ff 	mov.w	r7, #4294967295
 8002e00:	e7f4      	b.n	8002dec <__swbuf_r+0x64>
	...

08002e04 <__swsetup_r>:
 8002e04:	b538      	push	{r3, r4, r5, lr}
 8002e06:	4b2a      	ldr	r3, [pc, #168]	; (8002eb0 <__swsetup_r+0xac>)
 8002e08:	4605      	mov	r5, r0
 8002e0a:	6818      	ldr	r0, [r3, #0]
 8002e0c:	460c      	mov	r4, r1
 8002e0e:	b118      	cbz	r0, 8002e18 <__swsetup_r+0x14>
 8002e10:	6a03      	ldr	r3, [r0, #32]
 8002e12:	b90b      	cbnz	r3, 8002e18 <__swsetup_r+0x14>
 8002e14:	f7ff f9fc 	bl	8002210 <__sinit>
 8002e18:	89a3      	ldrh	r3, [r4, #12]
 8002e1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e1e:	0718      	lsls	r0, r3, #28
 8002e20:	d422      	bmi.n	8002e68 <__swsetup_r+0x64>
 8002e22:	06d9      	lsls	r1, r3, #27
 8002e24:	d407      	bmi.n	8002e36 <__swsetup_r+0x32>
 8002e26:	2309      	movs	r3, #9
 8002e28:	602b      	str	r3, [r5, #0]
 8002e2a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002e2e:	81a3      	strh	r3, [r4, #12]
 8002e30:	f04f 30ff 	mov.w	r0, #4294967295
 8002e34:	e034      	b.n	8002ea0 <__swsetup_r+0x9c>
 8002e36:	0758      	lsls	r0, r3, #29
 8002e38:	d512      	bpl.n	8002e60 <__swsetup_r+0x5c>
 8002e3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e3c:	b141      	cbz	r1, 8002e50 <__swsetup_r+0x4c>
 8002e3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e42:	4299      	cmp	r1, r3
 8002e44:	d002      	beq.n	8002e4c <__swsetup_r+0x48>
 8002e46:	4628      	mov	r0, r5
 8002e48:	f7ff faf4 	bl	8002434 <_free_r>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	6363      	str	r3, [r4, #52]	; 0x34
 8002e50:	89a3      	ldrh	r3, [r4, #12]
 8002e52:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002e56:	81a3      	strh	r3, [r4, #12]
 8002e58:	2300      	movs	r3, #0
 8002e5a:	6063      	str	r3, [r4, #4]
 8002e5c:	6923      	ldr	r3, [r4, #16]
 8002e5e:	6023      	str	r3, [r4, #0]
 8002e60:	89a3      	ldrh	r3, [r4, #12]
 8002e62:	f043 0308 	orr.w	r3, r3, #8
 8002e66:	81a3      	strh	r3, [r4, #12]
 8002e68:	6923      	ldr	r3, [r4, #16]
 8002e6a:	b94b      	cbnz	r3, 8002e80 <__swsetup_r+0x7c>
 8002e6c:	89a3      	ldrh	r3, [r4, #12]
 8002e6e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002e72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e76:	d003      	beq.n	8002e80 <__swsetup_r+0x7c>
 8002e78:	4621      	mov	r1, r4
 8002e7a:	4628      	mov	r0, r5
 8002e7c:	f000 f884 	bl	8002f88 <__smakebuf_r>
 8002e80:	89a0      	ldrh	r0, [r4, #12]
 8002e82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e86:	f010 0301 	ands.w	r3, r0, #1
 8002e8a:	d00a      	beq.n	8002ea2 <__swsetup_r+0x9e>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60a3      	str	r3, [r4, #8]
 8002e90:	6963      	ldr	r3, [r4, #20]
 8002e92:	425b      	negs	r3, r3
 8002e94:	61a3      	str	r3, [r4, #24]
 8002e96:	6923      	ldr	r3, [r4, #16]
 8002e98:	b943      	cbnz	r3, 8002eac <__swsetup_r+0xa8>
 8002e9a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002e9e:	d1c4      	bne.n	8002e2a <__swsetup_r+0x26>
 8002ea0:	bd38      	pop	{r3, r4, r5, pc}
 8002ea2:	0781      	lsls	r1, r0, #30
 8002ea4:	bf58      	it	pl
 8002ea6:	6963      	ldrpl	r3, [r4, #20]
 8002ea8:	60a3      	str	r3, [r4, #8]
 8002eaa:	e7f4      	b.n	8002e96 <__swsetup_r+0x92>
 8002eac:	2000      	movs	r0, #0
 8002eae:	e7f7      	b.n	8002ea0 <__swsetup_r+0x9c>
 8002eb0:	20000064 	.word	0x20000064

08002eb4 <_raise_r>:
 8002eb4:	291f      	cmp	r1, #31
 8002eb6:	b538      	push	{r3, r4, r5, lr}
 8002eb8:	4604      	mov	r4, r0
 8002eba:	460d      	mov	r5, r1
 8002ebc:	d904      	bls.n	8002ec8 <_raise_r+0x14>
 8002ebe:	2316      	movs	r3, #22
 8002ec0:	6003      	str	r3, [r0, #0]
 8002ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec6:	bd38      	pop	{r3, r4, r5, pc}
 8002ec8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002eca:	b112      	cbz	r2, 8002ed2 <_raise_r+0x1e>
 8002ecc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002ed0:	b94b      	cbnz	r3, 8002ee6 <_raise_r+0x32>
 8002ed2:	4620      	mov	r0, r4
 8002ed4:	f000 f830 	bl	8002f38 <_getpid_r>
 8002ed8:	462a      	mov	r2, r5
 8002eda:	4601      	mov	r1, r0
 8002edc:	4620      	mov	r0, r4
 8002ede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ee2:	f000 b817 	b.w	8002f14 <_kill_r>
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d00a      	beq.n	8002f00 <_raise_r+0x4c>
 8002eea:	1c59      	adds	r1, r3, #1
 8002eec:	d103      	bne.n	8002ef6 <_raise_r+0x42>
 8002eee:	2316      	movs	r3, #22
 8002ef0:	6003      	str	r3, [r0, #0]
 8002ef2:	2001      	movs	r0, #1
 8002ef4:	e7e7      	b.n	8002ec6 <_raise_r+0x12>
 8002ef6:	2400      	movs	r4, #0
 8002ef8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002efc:	4628      	mov	r0, r5
 8002efe:	4798      	blx	r3
 8002f00:	2000      	movs	r0, #0
 8002f02:	e7e0      	b.n	8002ec6 <_raise_r+0x12>

08002f04 <raise>:
 8002f04:	4b02      	ldr	r3, [pc, #8]	; (8002f10 <raise+0xc>)
 8002f06:	4601      	mov	r1, r0
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	f7ff bfd3 	b.w	8002eb4 <_raise_r>
 8002f0e:	bf00      	nop
 8002f10:	20000064 	.word	0x20000064

08002f14 <_kill_r>:
 8002f14:	b538      	push	{r3, r4, r5, lr}
 8002f16:	4d07      	ldr	r5, [pc, #28]	; (8002f34 <_kill_r+0x20>)
 8002f18:	2300      	movs	r3, #0
 8002f1a:	4604      	mov	r4, r0
 8002f1c:	4608      	mov	r0, r1
 8002f1e:	4611      	mov	r1, r2
 8002f20:	602b      	str	r3, [r5, #0]
 8002f22:	f7fd fe4c 	bl	8000bbe <_kill>
 8002f26:	1c43      	adds	r3, r0, #1
 8002f28:	d102      	bne.n	8002f30 <_kill_r+0x1c>
 8002f2a:	682b      	ldr	r3, [r5, #0]
 8002f2c:	b103      	cbz	r3, 8002f30 <_kill_r+0x1c>
 8002f2e:	6023      	str	r3, [r4, #0]
 8002f30:	bd38      	pop	{r3, r4, r5, pc}
 8002f32:	bf00      	nop
 8002f34:	200001fc 	.word	0x200001fc

08002f38 <_getpid_r>:
 8002f38:	f7fd be39 	b.w	8000bae <_getpid>

08002f3c <__swhatbuf_r>:
 8002f3c:	b570      	push	{r4, r5, r6, lr}
 8002f3e:	460c      	mov	r4, r1
 8002f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f44:	2900      	cmp	r1, #0
 8002f46:	b096      	sub	sp, #88	; 0x58
 8002f48:	4615      	mov	r5, r2
 8002f4a:	461e      	mov	r6, r3
 8002f4c:	da0d      	bge.n	8002f6a <__swhatbuf_r+0x2e>
 8002f4e:	89a3      	ldrh	r3, [r4, #12]
 8002f50:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002f54:	f04f 0100 	mov.w	r1, #0
 8002f58:	bf0c      	ite	eq
 8002f5a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002f5e:	2340      	movne	r3, #64	; 0x40
 8002f60:	2000      	movs	r0, #0
 8002f62:	6031      	str	r1, [r6, #0]
 8002f64:	602b      	str	r3, [r5, #0]
 8002f66:	b016      	add	sp, #88	; 0x58
 8002f68:	bd70      	pop	{r4, r5, r6, pc}
 8002f6a:	466a      	mov	r2, sp
 8002f6c:	f000 f848 	bl	8003000 <_fstat_r>
 8002f70:	2800      	cmp	r0, #0
 8002f72:	dbec      	blt.n	8002f4e <__swhatbuf_r+0x12>
 8002f74:	9901      	ldr	r1, [sp, #4]
 8002f76:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002f7a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002f7e:	4259      	negs	r1, r3
 8002f80:	4159      	adcs	r1, r3
 8002f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f86:	e7eb      	b.n	8002f60 <__swhatbuf_r+0x24>

08002f88 <__smakebuf_r>:
 8002f88:	898b      	ldrh	r3, [r1, #12]
 8002f8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f8c:	079d      	lsls	r5, r3, #30
 8002f8e:	4606      	mov	r6, r0
 8002f90:	460c      	mov	r4, r1
 8002f92:	d507      	bpl.n	8002fa4 <__smakebuf_r+0x1c>
 8002f94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002f98:	6023      	str	r3, [r4, #0]
 8002f9a:	6123      	str	r3, [r4, #16]
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	6163      	str	r3, [r4, #20]
 8002fa0:	b002      	add	sp, #8
 8002fa2:	bd70      	pop	{r4, r5, r6, pc}
 8002fa4:	ab01      	add	r3, sp, #4
 8002fa6:	466a      	mov	r2, sp
 8002fa8:	f7ff ffc8 	bl	8002f3c <__swhatbuf_r>
 8002fac:	9900      	ldr	r1, [sp, #0]
 8002fae:	4605      	mov	r5, r0
 8002fb0:	4630      	mov	r0, r6
 8002fb2:	f7ff fab3 	bl	800251c <_malloc_r>
 8002fb6:	b948      	cbnz	r0, 8002fcc <__smakebuf_r+0x44>
 8002fb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fbc:	059a      	lsls	r2, r3, #22
 8002fbe:	d4ef      	bmi.n	8002fa0 <__smakebuf_r+0x18>
 8002fc0:	f023 0303 	bic.w	r3, r3, #3
 8002fc4:	f043 0302 	orr.w	r3, r3, #2
 8002fc8:	81a3      	strh	r3, [r4, #12]
 8002fca:	e7e3      	b.n	8002f94 <__smakebuf_r+0xc>
 8002fcc:	89a3      	ldrh	r3, [r4, #12]
 8002fce:	6020      	str	r0, [r4, #0]
 8002fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fd4:	81a3      	strh	r3, [r4, #12]
 8002fd6:	9b00      	ldr	r3, [sp, #0]
 8002fd8:	6163      	str	r3, [r4, #20]
 8002fda:	9b01      	ldr	r3, [sp, #4]
 8002fdc:	6120      	str	r0, [r4, #16]
 8002fde:	b15b      	cbz	r3, 8002ff8 <__smakebuf_r+0x70>
 8002fe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002fe4:	4630      	mov	r0, r6
 8002fe6:	f000 f81d 	bl	8003024 <_isatty_r>
 8002fea:	b128      	cbz	r0, 8002ff8 <__smakebuf_r+0x70>
 8002fec:	89a3      	ldrh	r3, [r4, #12]
 8002fee:	f023 0303 	bic.w	r3, r3, #3
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	81a3      	strh	r3, [r4, #12]
 8002ff8:	89a3      	ldrh	r3, [r4, #12]
 8002ffa:	431d      	orrs	r5, r3
 8002ffc:	81a5      	strh	r5, [r4, #12]
 8002ffe:	e7cf      	b.n	8002fa0 <__smakebuf_r+0x18>

08003000 <_fstat_r>:
 8003000:	b538      	push	{r3, r4, r5, lr}
 8003002:	4d07      	ldr	r5, [pc, #28]	; (8003020 <_fstat_r+0x20>)
 8003004:	2300      	movs	r3, #0
 8003006:	4604      	mov	r4, r0
 8003008:	4608      	mov	r0, r1
 800300a:	4611      	mov	r1, r2
 800300c:	602b      	str	r3, [r5, #0]
 800300e:	f7fd fe35 	bl	8000c7c <_fstat>
 8003012:	1c43      	adds	r3, r0, #1
 8003014:	d102      	bne.n	800301c <_fstat_r+0x1c>
 8003016:	682b      	ldr	r3, [r5, #0]
 8003018:	b103      	cbz	r3, 800301c <_fstat_r+0x1c>
 800301a:	6023      	str	r3, [r4, #0]
 800301c:	bd38      	pop	{r3, r4, r5, pc}
 800301e:	bf00      	nop
 8003020:	200001fc 	.word	0x200001fc

08003024 <_isatty_r>:
 8003024:	b538      	push	{r3, r4, r5, lr}
 8003026:	4d06      	ldr	r5, [pc, #24]	; (8003040 <_isatty_r+0x1c>)
 8003028:	2300      	movs	r3, #0
 800302a:	4604      	mov	r4, r0
 800302c:	4608      	mov	r0, r1
 800302e:	602b      	str	r3, [r5, #0]
 8003030:	f7fd fe34 	bl	8000c9c <_isatty>
 8003034:	1c43      	adds	r3, r0, #1
 8003036:	d102      	bne.n	800303e <_isatty_r+0x1a>
 8003038:	682b      	ldr	r3, [r5, #0]
 800303a:	b103      	cbz	r3, 800303e <_isatty_r+0x1a>
 800303c:	6023      	str	r3, [r4, #0]
 800303e:	bd38      	pop	{r3, r4, r5, pc}
 8003040:	200001fc 	.word	0x200001fc

08003044 <_init>:
 8003044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003046:	bf00      	nop
 8003048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800304a:	bc08      	pop	{r3}
 800304c:	469e      	mov	lr, r3
 800304e:	4770      	bx	lr

08003050 <_fini>:
 8003050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003052:	bf00      	nop
 8003054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003056:	bc08      	pop	{r3}
 8003058:	469e      	mov	lr, r3
 800305a:	4770      	bx	lr
